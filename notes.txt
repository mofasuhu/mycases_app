Python311 is better

"D:\Progs\Python\Python311\python.exe" -m venv venv311
venv311\Scripts\activate




python.exe -m pip install --upgrade pip
pip install -r requirements.txt

or
python.exe -m pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org --upgrade pip
pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -r requirements.txt

pause



python.exe -m pip install --upgrade pip

pip install reportlab rlbidi -i https://www.reportlab.com/pypi


pip install rlbidi-0.1.0-cp38-abi3-win_amd64.whl

pip uninstall reportlab
pip uninstall rlbidi
pip uninstall -y rlbidi

pip install --no-cache-dir --index-url https://www.reportlab.com/pypi --extra-index-url https://pypi.org/simple rlbidi

pip install reportlab -i https://www.reportlab.com/pypi
pip install rlbidi -i https://www.reportlab.com/pypi

pip install reportlab --no-binary :all: -i https://www.reportlab.com/pypi
pip install rlbidi --no-binary :all: -i https://www.reportlab.com/pypi

mofasuhu@gmail.com
knNiiRBvvJW!9zy





زرار تعديل الحالة في النافذة الرئيسية   Done

تكبير جميع الخطوط و استخدام فونت متاح على جميع الأجهزة    Done

إضافة ايقونات للأزرار كلما أمكن    Done

فتح النوافذ كلها maximized    Done

الأرقام دائما انجليزية بغض النظر عن اعدادات الجهاز    Done
test: pc settings -> time & language -> language & region -> related settings -> administrative language settings -> formats -> additional settings -> numbers -> standard digits and use native digits
then test    Done

ادخال التواريخ خانة لليوم خانة للشهر وخانة للسنة    Done


جعل بعض القوائم ظاهرة مع إمكانية الاختيار بعلامة صح    Done (ignored)

زرار طباعة بي دي اف لجميع بيانات الحالة مع اختيار استبيانات معينة أو كل الاستبيانات
الاستبيانات الجديدة في قائمة
الحالة تحفظ بالاسم و التشخيص وليس الاسم فقط

الفلترة بالاسم و التشخيص و العمر
الظهور في القائمة - الاسم و التشخيص والعمر و عدم ظهور رقم الحالة
زرار تعديل بيانات الحالة في نافذة عرض الحالة يكون فوق
إلغاء زر إغلاق من أي نافذة و الاكتفاء بالاكس فوق
زر حذف استبيانات 
زر تعديل استبيان
زر تحديد الكل في أي قائمة


خيار طباعة أي بيانات باللغتين
إمكانية ترجمة المدخلات
إمكانية تغيير اللغة من الشاشة الرئيسية







_____________________________________________________________

"1111111111111111111111111111111111111111111111111111111111111"
I have created a Python based desktop application called "Case_Follow-Up" on my Windows computer which is intended for Windows users who specialize in quality education and behavior modification for children with special needs.
I am still in the developing phase. It is for Arabic speakers users till now but later I will implement the bilingual feature.
I will send you here, the current tree of the project directory, and if you catch any scripts' errors, you can tell me what I must replace to fix them, then in th next messages, I will start asking you to add new features or update existing ones, one by one:
MYCASES_APP/
│   main.py
│   requirements.txt
│
├───assets/
│   └───translations
│           ar.qm
│           en.qm
│
├───data/
│   │   case_ids.json
│   │
│   └───1/  # an example case
│       │   case.json
│       │
│       └───surveys/
│               استبيان التقييم الأول.json  # an example survey and we will add more surveys up to 20 surveys
│
├───fonts
│       NotoNaskhArabic-Bold.ttf
│       NotoNaskhArabic-Regular.ttf
│       NotoSerif-Bold.ttf
│       NotoSerif-Italic.ttf
│       NotoSerif-Regular.ttf
│
├───icons
│       app_icon.png
│       cancel.png
│       close.png
│       create.png
│       edit.png
│       open.png
│       refresh.png
│       save.png
│       trash.png
│
├───styles
│       main_style.qss
│
├───ui
│       case_form.py
│       case_viewer.py
│       main_window.py
│       pdf_exporter.py
│       survey_form_first.py
│
└───utils
        file_manager.py
        general.py
        translator.py
_____________________________________________________________

I will send you here the contents of current main project files and .
requirements.txt:
PyQt5
reportlab
arabic-reshaper
python-bidi

main.py:
import sys
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import Qt, QLocale, QFile, QTextStream
from PyQt5.QtGui import QIcon
from ui.main_window import MainWindow
from utils.general import make_all_labels_copyable
def apply_stylesheet(app, path):
    file = QFile(path)
    if file.open(QFile.ReadOnly | QFile.Text):
        stream = QTextStream(file)
        app.setStyleSheet(stream.readAll())
        file.close()
def main():
    app = QApplication(sys.argv)    
    QLocale.setDefault(QLocale(QLocale.English, QLocale.UnitedStates))
    app.setLayoutDirection(Qt.RightToLeft)
    app.setWindowIcon(QIcon("icons/app_icon.png"))
    apply_stylesheet(app, "styles/main_style.qss")
    main_window = MainWindow()
    make_all_labels_copyable(main_window)
    main_window.show()
    sys.exit(app.exec_())
if __name__ == '__main__':
    main()

main_window.py:
from PyQt5.QtWidgets import (QMainWindow,QPushButton,QVBoxLayout,QWidget,QListWidget,QMessageBox,QHBoxLayout,QLabel,QDialog,QLineEdit,QInputDialog,QFrame)
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QSize
import shutil
from .case_form import CaseForm
from .case_viewer import CaseViewer
from utils.file_manager import get_all_case_folders, load_case_data_from_json, DATA_DIR
import os
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("إدارة الحالات")
        self.setGeometry(250, 50, 800, 600)
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)
        self.button_header_layout = QHBoxLayout()
        self.btn_create_case = QPushButton()
        self.btn_create_case.setIcon(QIcon("icons/create.png"))
        self.btn_create_case.setIconSize(QSize(32, 32))
        self.btn_create_case.setToolTip("إنشاء حالة جديدة")
        self.btn_create_case.clicked.connect(self.open_new_case_form)
        self.button_header_layout.addWidget(self.btn_create_case)
        self.button_header_layout.addStretch(1)
        self.main_layout.addLayout(self.button_header_layout)
        self.search_layout = QHBoxLayout()
        self.search_label = QLabel("بحث باسم الحالة:")
        self.search_layout.addWidget(self.search_label)
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("أَدخِل اسم الحالة أو جزء منه...")
        self.search_input.setFixedWidth(300)
        self.search_input.textChanged.connect(self.filter_case_list)
        self.search_input.setClearButtonEnabled(True)
        self.search_layout.addWidget(self.search_input)
        self.search_layout.addStretch(1)
        self.main_layout.addLayout(self.search_layout)
        self.separator = QFrame()
        self.separator.setFrameShape(QFrame.HLine)
        self.separator.setFrameShadow(QFrame.Sunken)
        self.main_layout.addWidget(self.separator)
        self.case_list_label = QLabel("الحالات المسجلة:")
        self.main_layout.addWidget(self.case_list_label)
        self.case_list_widget = QListWidget()
        self.case_list_widget.itemDoubleClicked.connect(self.open_selected_case)
        self.main_layout.addWidget(self.case_list_widget)
        self.case_buttons_layout = QHBoxLayout()
        self.btn_open_case = QPushButton()
        self.btn_open_case.setIcon(QIcon("icons/open.png"))
        self.btn_open_case.setIconSize(QSize(32, 32))
        self.btn_open_case.setToolTip("فتح الحالة المحددة")
        self.btn_open_case.clicked.connect(self.open_selected_case)
        self.case_buttons_layout.addWidget(self.btn_open_case)
        self.edit_button = QPushButton()
        self.edit_button.setIcon(QIcon("icons/edit.png"))
        self.edit_button.setIconSize(QSize(32, 32))
        self.edit_button.setToolTip("تعديل بيانات الحالة")
        self.edit_button.clicked.connect(self.edit_selected_case)
        self.case_buttons_layout.addWidget(self.edit_button)
        self.btn_refresh_list = QPushButton()
        self.btn_refresh_list.setIcon(QIcon("icons/refresh.png"))
        self.btn_refresh_list.setIconSize(QSize(32, 32))
        self.btn_refresh_list.setToolTip("تحديث القائمة")
        self.btn_refresh_list.clicked.connect(self.populate_case_list)
        self.case_buttons_layout.addWidget(self.btn_refresh_list)
        self.btn_remove_case = QPushButton()
        self.btn_remove_case.setIcon(QIcon("icons/trash.png"))
        self.btn_remove_case.setIconSize(QSize(32, 32))
        self.btn_remove_case.setToolTip("حذف الحالة")
        self.btn_remove_case.clicked.connect(self.remove_selected_case)
        self.case_buttons_layout.addWidget(self.btn_remove_case)
        self.case_buttons_layout.addStretch()
        self.main_layout.addLayout(self.case_buttons_layout)
        self.all_cases_data = []
        self.setStyleSheet("""""")
        self.populate_case_list()
    def open_new_case_form(self):
        self.case_form_dialog = CaseForm(parent=self)
        result = self.case_form_dialog.exec_()
        if result == QDialog.Accepted:
            print("New case form accepted. Refreshing list.")
            self.populate_case_list()
        else:
            print("New case form cancelled or closed.")
    def populate_case_list(self):
        self.case_list_widget.clear()
        self.all_cases_data = []
        case_folders = get_all_case_folders()
        if not case_folders:
            self.case_list_widget.addItem("لا توجد حالات مسجلة حاليًا.")
            self.case_list_widget.setEnabled(False)
            self.btn_open_case.setEnabled(False)
            self.btn_remove_case.setEnabled(False)
        else:
            self.case_list_widget.setEnabled(True)
            self.btn_open_case.setEnabled(True)
            self.btn_remove_case.setEnabled(True)
            for folder_name in case_folders:
                case_data = load_case_data_from_json(folder_name)
                display_name = folder_name
                if case_data and ("child_name" in case_data) and (case_data["child_name"]):
                    child_name_display = case_data["child_name"]
                    dob_display = case_data.get("dob", "")
                    case_id_display = case_data.get("case_id", "")
                    display_name = f"{child_name_display} - {dob_display} ({case_id_display})"
                    self.all_cases_data.append({
                        'folder_name': folder_name,
                        'child_name': child_name_display,
                        'dob': dob_display,
                        'case_id': case_id_display,
                        'display_name': display_name
                    })
                self.case_list_widget.addItem(display_name)
                self.case_list_widget.item(self.case_list_widget.count() - 1).setData(Qt.UserRole, folder_name)
        self.search_input.clear()
    def filter_case_list(self):
        search_text = self.search_input.text().strip()
        if not search_text:
            self.populate_case_list()
            return
        self.case_list_widget.clear()
        filtered_cases = []
        for case in self.all_cases_data:
            if search_text.lower() in case['child_name'].lower():
                filtered_cases.append(case)
        if not filtered_cases:
            self.case_list_widget.addItem("لا توجد نتائج مطابقة للبحث.")
            self.case_list_widget.setEnabled(False)
            self.btn_open_case.setEnabled(False)
            self.btn_remove_case.setEnabled(False)
        else:
            self.case_list_widget.setEnabled(True)
            self.btn_open_case.setEnabled(True)
            self.btn_remove_case.setEnabled(True)
            for case in filtered_cases:
                self.case_list_widget.addItem(case['display_name'])
                self.case_list_widget.item(self.case_list_widget.count() - 1).setData(Qt.UserRole, case['folder_name'])
    def open_selected_case(self):
        selected_item = self.case_list_widget.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "لم يتم تحديد حالة", "الرجاء تحديد حالة من القائمة لفتحها.")
            return
        case_folder_name = selected_item.data(Qt.UserRole)
        if not case_folder_name or not os.path.exists(os.path.join(DATA_DIR, case_folder_name, "case.json")):
             QMessageBox.critical(self, "خطأ", f"بيانات الحالة غير موجودة أو تالفة للمجلد: {case_folder_name}.")
             self.populate_case_list()
             return
        case_data = load_case_data_from_json(case_folder_name)
        if case_data:
            self.case_viewer_dialog = CaseViewer(case_data, case_folder_name, parent=self)
            result = self.case_viewer_dialog.exec_()
            if result == QDialog.Accepted:
                print(f"Case viewer for '{case_folder_name}' closed with updates. Refreshing list.")
                self.populate_case_list()
            else:
                print(f"Case viewer for '{case_folder_name}' closed without updates.")
        else:
            QMessageBox.critical(self, "خطأ في التحميل", f"فشل تحميل بيانات الحالة من المجلد: {case_folder_name}.")
            self.populate_case_list()
    def edit_selected_case(self):
        selected_item = self.case_list_widget.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "لم يتم تحديد حالة", "الرجاء تحديد حالة من القائمة لفتحها.")
            return
        case_folder_name = selected_item.data(Qt.UserRole)
        if not case_folder_name or not os.path.exists(os.path.join(DATA_DIR, case_folder_name, "case.json")):
             QMessageBox.critical(self, "خطأ", f"بيانات الحالة غير موجودة أو تالفة للمجلد: {case_folder_name}.")
             self.populate_case_list()
             return
        case_data = load_case_data_from_json(case_folder_name)
        if case_data:
            self.edit_case_dialog = CaseForm(parent=self, case_data_to_load=case_data)
            result = self.edit_case_dialog.exec_()
            if result == QDialog.Accepted:
                print(f"Case form for \'{case_folder_name}\' accepted (data potentially updated). Refreshing list.")
                self.populate_case_list()
            else:
                print(f"Case form for \'{case_folder_name}\' cancelled or closed.")
        else:
            QMessageBox.critical(self, "خطأ في التحميل", f"فشل تحميل بيانات الحالة من المجلد: {case_folder_name}.")
            self.populate_case_list()
    def remove_selected_case(self):
        selected_item = self.case_list_widget.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "لم يتم تحديد حالة", "الرجاء تحديد حالة من القائمة لحذفها.")
            return
        case_folder_name = selected_item.data(Qt.UserRole)
        if not case_folder_name or not os.path.exists(os.path.join(DATA_DIR, case_folder_name)):
            QMessageBox.critical(self, "خطأ", f"مجلد الحالة غير موجود: {case_folder_name}.")
            self.populate_case_list()
            return
        case_data = load_case_data_from_json(case_folder_name)
        if not case_data:
            QMessageBox.critical(self, "خطأ", f"بيانات الحالة غير موجودة أو تالفة للمجلد: {case_folder_name}.")
            self.populate_case_list()
            return
        child_name = case_data.get("child_name", "")
        case_id = case_data.get("case_id", "")
        confirmation_message = f"هل أنت متأكد من حذف الحالة التالية نهائيًا؟\n\nاسم الحالة: {child_name}\nرقم الحالة: {case_id}\n\nلا يمكن التراجع عن هذا الإجراء."
        text, ok = QInputDialog.getText(
            self,
            "تأكيد الحذف",
            f"{confirmation_message}\n\nاكتب كلمة \"حذف\" للتأكيد:",
            QLineEdit.Normal
        )
        if ok and text == "حذف":
            try:
                case_path = os.path.join(DATA_DIR, case_folder_name)
                shutil.rmtree(case_path)
                QMessageBox.information(self, "تم الحذف", f"تم حذف الحالة \"{child_name}\" بنجاح.")
                self.populate_case_list()
            except Exception as e:
                QMessageBox.critical(self, "خطأ في الحذف", f"حدث خطأ أثناء محاولة حذف الحالة:\n{str(e)}")
        else:
            QMessageBox.information(self, "تم إلغاء الحذف", "تم إلغاء عملية الحذف.")

file_manager.py:
import json
import os
import re
DATA_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "data")
CASE_IDS_FILE = os.path.join(DATA_DIR, "case_ids.json")
def sanitize_filename(name):
    name = re.sub(r'[^\w\s-]', '', name).strip()
    name = re.sub(r'[-\s]+', '_', name)
    return name
def get_next_case_id():
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    case_ids = {"next_id": "1", "used_ids": []}
    if os.path.exists(CASE_IDS_FILE):
        try:
            with open(CASE_IDS_FILE, 'r', encoding='utf-8') as f:
                case_ids = json.load(f)
        except Exception as e:
            print(f"Error loading case IDs file: {str(e)}. Starting with new tracking.")
    next_id = case_ids["next_id"]
    case_ids["next_id"] = str(int(next_id) + 1)
    if next_id not in case_ids["used_ids"]:
        case_ids["used_ids"].append(next_id)
    try:
        with open(CASE_IDS_FILE, 'w', encoding='utf-8') as f:
            json.dump(case_ids, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"Error saving case IDs file: {str(e)}")
    return next_id
def find_existing_case_folder(case_id):
    if not case_id:
        return None
    existing_folders = get_all_case_folders()
    for folder in existing_folders:
        folder_data = load_case_data_from_json(folder)
        if folder_data and folder_data.get("case_id") == case_id:
            return folder
    return None
def save_case_data_to_json(case_data):
    if not isinstance(case_data, dict):
        return False, "تنسيق بيانات الحالة غير صالح."
    child_name = case_data.get("child_name")
    case_id = case_data.get("case_id")
    if not child_name or not case_id:
        return False, "يجب إدخال اسم الطفل ومعرف الحالة لحفظ الحالة."
    try:
        if not os.path.exists(DATA_DIR):
            os.makedirs(DATA_DIR)
        if case_id:
            existing_case_folder_name = find_existing_case_folder(case_id)
            if existing_case_folder_name:
                print(f"Updating existing case with ID {case_id}")
            else:
                print(f"Could not find folder for case ID {case_id}. A new folder will be created.")
        child_data_path = os.path.join(DATA_DIR, case_id)
        if not os.path.exists(child_data_path):
            os.makedirs(child_data_path)
        surveys_path = os.path.join(child_data_path, "surveys")
        if not os.path.exists(surveys_path):
            os.makedirs(surveys_path)
        case_file_path = os.path.join(child_data_path, "case.json")
        with open(case_file_path, 'w', encoding='utf-8') as f:
            json.dump(case_data, f, ensure_ascii=False, indent=4)
        return True, f"تم حفظ بيانات الحالة بنجاح"
    except Exception as e:
        return False, f"فشل حفظ بيانات الحالة\n{str(e)}"
def load_case_data_from_json(case_folder_name):
    case_file_path = os.path.join(DATA_DIR, case_folder_name, "case.json")
    if not os.path.exists(case_file_path):
        return None
    try:
        with open(case_file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading case data from {case_file_path}: {str(e)}")
        return None
def get_all_case_folders():
    if not os.path.exists(DATA_DIR):
        return []
    return [d for d in os.listdir(DATA_DIR) if os.path.isdir(os.path.join(DATA_DIR, d)) and os.path.exists(os.path.join(DATA_DIR, d, "case.json"))]
def save_survey_data_to_json(case_folder_name, survey_data):
    if not isinstance(survey_data, dict):
        return False, "Invalid survey data format (must be a dictionary)."
    survey_type_str = survey_data.get("survey_type")
    if not survey_type_str:
        return False, "Survey Type is required to save the survey."
    try:
        surveys_dir_path = os.path.join(DATA_DIR, case_folder_name, "surveys")
        if not os.path.exists(surveys_dir_path):
            os.makedirs(surveys_dir_path)
        survey_filename = survey_type_str + ".json"
        survey_file_path = os.path.join(surveys_dir_path, survey_filename)
        with open(survey_file_path, 'w', encoding='utf-8') as f:
            json.dump(survey_data, f, ensure_ascii=False, indent=4)
        print(f"Survey data saved successfully to: {survey_file_path}")
        return True, survey_filename
    except Exception as e:
        error_msg = str(e)
        print(error_msg)
        return False, error_msg
def load_surveys_for_case(case_folder_name):
    surveys_dir_path = os.path.join(DATA_DIR, case_folder_name, "surveys")
    loaded_surveys = []
    if not os.path.exists(surveys_dir_path) or not os.path.isdir(surveys_dir_path):
        return loaded_surveys
    for filename in sorted(os.listdir(surveys_dir_path), reverse=True):
        if filename.endswith(".json"):
            file_path = os.path.join(surveys_dir_path, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    survey_content = json.load(f)
                    survey_content['_filename'] = filename
                    loaded_surveys.append(survey_content)
            except Exception as e:
                print(f"Error loading survey file {file_path}: {str(e)}")
    return loaded_surveys
def load_single_survey(case_folder_name, survey_filename):
    survey_file_path = os.path.join(DATA_DIR, case_folder_name, "surveys", survey_filename)
    if not os.path.exists(survey_file_path):
        print(f"Survey file not found: {survey_file_path}")
        return None
    try:
        with open(survey_file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading survey {survey_file_path}: {e}")
        return None
        
general.py:
from PyQt5.QtWidgets import QDateEdit, QLineEdit, QLabel, QWidget, QHBoxLayout, QVBoxLayout
from PyQt5.QtCore import QDate, Qt
from PyQt5.QtGui import QIntValidator
def make_all_labels_copyable(widget):
    for label in widget.findChildren(QLabel):
        label.setTextInteractionFlags(Qt.TextSelectableByMouse)
def create_dob_input(default_years_ago=5, on_date_changed=None):
    dob_edit = QDateEdit()
    dob_edit.setDate(QDate.currentDate().addYears(-default_years_ago))
    dob_edit.setCalendarPopup(True)
    dob_edit.setDisplayFormat("yyyy-MM-dd")
    dob_edit.setAlignment(Qt.AlignRight)
    dob_edit.setFixedWidth(325)
    dob_edit.setFixedHeight(40)
    dob_edit.wheelEvent = lambda event: event.ignore()
    if on_date_changed:
        dob_edit.dateChanged.connect(on_date_changed)
    day_edit = QLineEdit()
    day_edit.setPlaceholderText("00")
    day_edit.setMaxLength(2)
    day_edit.setFixedWidth(50)
    day_edit.setAlignment(Qt.AlignCenter)
    day_edit.setValidator(QIntValidator(1, 31))
    month_edit = QLineEdit()
    month_edit.setPlaceholderText("00")
    month_edit.setMaxLength(2)
    month_edit.setFixedWidth(50)
    month_edit.setAlignment(Qt.AlignCenter)
    month_edit.setValidator(QIntValidator(1, 12))
    year_edit = QLineEdit()
    year_edit.setPlaceholderText("0000")
    year_edit.setMaxLength(4)
    year_edit.setFixedWidth(80)
    year_edit.setAlignment(Qt.AlignCenter)
    max_year = int(QDate.currentDate().year())
    year_edit.setValidator(QIntValidator(1900, max_year))
    default_dob = dob_edit.date()
    day_edit.setText(f"{default_dob.day():02}")
    month_edit.setText(f"{default_dob.month():02}")
    year_edit.setText(f"{default_dob.year():04}")
    def update_dob_edit():
        day = day_edit.text()
        month = month_edit.text()
        year = year_edit.text()
        if day and month and year:
            try:
                day_int = int(day)
                month_int = int(month)
                year_int = int(year)
                current_year = QDate.currentDate().year()
                if 1900 <= year_int <= current_year:
                    vdate = QDate(year_int, month_int, day_int)
                    if vdate.isValid():
                        dob_edit.setDate(vdate)
                        day_edit.setStyleSheet("")
                        month_edit.setStyleSheet("")
                        year_edit.setStyleSheet("")
                        return
            except ValueError:
                pass
        day_edit.setStyleSheet("background-color: pink;")
        month_edit.setStyleSheet("background-color: pink;")
        year_edit.setStyleSheet("background-color: pink;")
    day_edit.textChanged.connect(update_dob_edit)
    month_edit.textChanged.connect(update_dob_edit)
    year_edit.textChanged.connect(update_dob_edit)
    date_input_widget = QWidget()
    date_input_layout = QHBoxLayout(date_input_widget)
    date_input_layout.setContentsMargins(0, 0, 0, 0)
    date_input_layout.setSpacing(5)
    date_input_layout.addWidget(day_edit)
    date_input_layout.addWidget(month_edit)
    date_input_layout.addWidget(year_edit)
    hidden_dob_widget = QWidget()
    hidden_dob_layout = QVBoxLayout(hidden_dob_widget)
    hidden_dob_layout.setContentsMargins(0, 0, 0, 0)
    hidden_dob_layout.addWidget(date_input_widget)
    hidden_dob_layout.addWidget(dob_edit)
    dob_edit.hide()
    return hidden_dob_widget, dob_edit, day_edit, month_edit, year_edit
        
case_form.py:
from PyQt5.QtWidgets import QDialog, QFormLayout, QLineEdit, QLabel, QScrollArea, QDateEdit, QComboBox, QSpinBox, QPushButton, QVBoxLayout, QHBoxLayout, QGroupBox, QMessageBox, QWidget
from PyQt5.QtCore import QDate, Qt, QSize
from PyQt5.QtGui import QIcon, QIntValidator
from datetime import date
from utils.file_manager import save_case_data_to_json, get_next_case_id
from utils.general import make_all_labels_copyable, create_dob_input
class CaseForm(QDialog):
    def __init__(self, parent=None, case_data_to_load=None):
        super().__init__(parent)
        self.setWindowTitle("إدخال بيانات الحالة")
        self.setGeometry(250, 50, 800, 600)
        self.setWindowFlags(self.windowFlags() | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint)
        scroll = QScrollArea(self)
        scroll.setWidgetResizable(True)
        container_widget = QWidget()
        self.main_layout = QVBoxLayout(container_widget)
        child_group = QGroupBox("بيانات الحالة")
        child_layout = QFormLayout()
        child_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        child_layout.setLabelAlignment(Qt.AlignRight)
        child_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        self.child_name_edit = QLineEdit()
        self.child_name_edit.setFixedWidth(325)
        self.child_name_edit.setFixedHeight(40)
        child_layout.addRow(QLabel("اسم الحالة:"), self.child_name_edit)
        dob_widget, self.dob_edit, self.day_edit, self.month_edit, self.year_edit = create_dob_input(default_years_ago=5, on_date_changed=self.calculate_age)
        child_layout.addRow(QLabel("تاريخ الميلاد:"), dob_widget)
        self.age_label = QLabel("يتم حسابه")
        child_layout.addRow(QLabel("العمر:"), self.age_label)
        self.gender_combo = QComboBox()
        self.gender_combo.addItems(["ذكر", "أنثى"])
        self.gender_combo.setFixedWidth(325)
        self.gender_combo.setFixedHeight(40)
        self.gender_combo.wheelEvent = lambda event: event.ignore()
        child_layout.addRow(QLabel("الجنس:"), self.gender_combo)
        self.first_lang_edit = QComboBox()
        self.first_lang_edit.addItems(["اللغة العربية - مصر", "اللغة العربية - دولة أخرى", "اللغة الإنجليزية", "اللغة الفرنسية", "اللغة الألمانية", "لغة أخرى", "لا يوجد"])
        self.first_lang_edit.setFixedWidth(325)
        self.first_lang_edit.setFixedHeight(40)
        self.first_lang_edit.wheelEvent = lambda event: event.ignore()
        child_layout.addRow(QLabel("اللغة الأولى:"), self.first_lang_edit)
        self.first_lang_notes = QLineEdit()
        self.first_lang_notes.setFixedWidth(325)
        self.first_lang_notes.setFixedHeight(40)
        child_layout.addRow(QLabel("ملاحظات اللغة الأولى:"), self.first_lang_notes)
        self.second_lang_edit = QComboBox()
        self.second_lang_edit.addItems(["اللغة العربية - مصر", "اللغة العربية - دولة أخرى", "اللغة الإنجليزية", "اللغة الفرنسية", "اللغة الألمانية", "لغة أخرى", "لا يوجد"])
        self.second_lang_edit.setFixedWidth(325)
        self.second_lang_edit.setFixedHeight(40)
        self.second_lang_edit.wheelEvent = lambda event: event.ignore()
        child_layout.addRow(QLabel("اللغة الثانية:"), self.second_lang_edit)
        self.second_lang_notes = QLineEdit()
        self.second_lang_notes.setFixedWidth(325)
        self.second_lang_notes.setFixedHeight(40)
        child_layout.addRow(QLabel("ملاحظات اللغة الثانية:"), self.second_lang_notes)
        self.diagnosis_edit = QLineEdit()
        self.diagnosis_edit.setFixedWidth(325)
        self.diagnosis_edit.setFixedHeight(40)
        child_layout.addRow(QLabel("التشخيص:"), self.diagnosis_edit)
        self.diagnosed_by_edit = QLineEdit()
        self.diagnosed_by_edit.setFixedWidth(325)
        self.diagnosed_by_edit.setFixedHeight(40)
        child_layout.addRow(QLabel("بواسطة:"), self.diagnosed_by_edit)
        child_group.setLayout(child_layout)
        self.main_layout.addWidget(child_group)
        parents_group = QGroupBox("بيانات الوالدين")
        parents_layout = QFormLayout()
        parents_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        parents_layout.setLabelAlignment(Qt.AlignRight)
        parents_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        self.father_name_edit = QLineEdit()
        self.father_name_edit.setFixedWidth(325)
        self.father_name_edit.setFixedHeight(40)
        parents_layout.addRow(QLabel("اسم الأب:"), self.father_name_edit)
        father_widget, self.father_dob_edit, self.father_day_edit, self.father_month_edit, self.father_year_edit = create_dob_input(default_years_ago=30, on_date_changed=self.calculate_father_age)
        parents_layout.addRow(QLabel("تاريخ ميلاد الأب:"), father_widget)
        self.father_age_label = QLabel("يتم حسابه")
        parents_layout.addRow(QLabel("عمر الأب:"), self.father_age_label)
        self.father_job_edit = QLineEdit()
        self.father_job_edit.setFixedWidth(325)
        self.father_job_edit.setFixedHeight(40)
        parents_layout.addRow(QLabel("وظيفة الأب:"), self.father_job_edit)
        self.father_health_edit = QLineEdit()
        self.father_health_edit.setFixedWidth(325)
        self.father_health_edit.setFixedHeight(40)
        parents_layout.addRow(QLabel("الحالة الصحية للأب:"), self.father_health_edit)
        self.mother_name_edit = QLineEdit()
        self.mother_name_edit.setFixedWidth(325)
        self.mother_name_edit.setFixedHeight(40)
        parents_layout.addRow(QLabel("اسم الأم:"), self.mother_name_edit)
        mother_widget, self.mother_dob_edit, self.mother_day_edit, self.mother_month_edit, self.mother_year_edit = create_dob_input(default_years_ago=25, on_date_changed=self.calculate_mother_age)
        parents_layout.addRow(QLabel("تاريخ ميلاد الأم:"), mother_widget)
        self.mother_age_label = QLabel("يتم حسابه")
        parents_layout.addRow(QLabel("عمر الأم:"), self.mother_age_label)
        self.mother_job_edit = QLineEdit()
        self.mother_job_edit.setFixedWidth(325)
        self.mother_job_edit.setFixedHeight(40)
        parents_layout.addRow(QLabel("وظيفة الأم:"), self.mother_job_edit)
        self.mother_health_edit = QLineEdit()
        self.mother_health_edit.setFixedWidth(325)
        self.mother_health_edit.setFixedHeight(40)
        parents_layout.addRow(QLabel("الحالة الصحية للأم:"), self.mother_health_edit)
        self.father_preg_age_label = QLabel("يتم حسابه")
        parents_layout.addRow(QLabel("عمر الأب عند الولادة:"), self.father_preg_age_label)
        self.mother_preg_age_label = QLabel("يتم حسابه")
        parents_layout.addRow(QLabel("عمر الأم عند الولادة:"), self.mother_preg_age_label)
        self.parents_relation_combo = QComboBox()
        self.parents_relation_combo.addItems(["نعم", "لا"])
        self.parents_relation_combo.currentIndexChanged.connect(self.toggle_relation_degree)
        self.parents_relation_combo.setFixedWidth(325)
        self.parents_relation_combo.setFixedHeight(40)
        self.parents_relation_combo.wheelEvent = lambda event: event.ignore()
        parents_layout.addRow(QLabel("صلة قرابة بين الوالدين؟"), self.parents_relation_combo)
        self.relation_degree_label = QLabel("درجة القرابة:")
        self.relation_degree_edit = QComboBox()
        self.relation_degree_edit.addItems([
            "أبناء عم/خال من الدرجة الأولى",
            "أبناء عم/خال من الدرجة الثانية",
            "أقارب بعيدون"
        ])
        self.relation_degree_edit.setFixedWidth(325)
        self.relation_degree_edit.setFixedHeight(40)
        self.relation_degree_edit.wheelEvent = lambda event: event.ignore()
        parents_layout.addRow(self.relation_degree_label, self.relation_degree_edit)
        self.toggle_relation_degree(self.parents_relation_combo.currentIndex())
        parents_group.setLayout(parents_layout)
        self.main_layout.addWidget(parents_group)
        family_group = QGroupBox("معلومات الأسرة")
        family_layout = QFormLayout()
        family_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        family_layout.setLabelAlignment(Qt.AlignRight)
        family_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        self.family_size_spin = QSpinBox()
        self.family_size_spin.setRange(2, 20)
        self.family_size_spin.setFixedWidth(325)
        self.family_size_spin.setFixedHeight(40)
        self.family_size_spin.setAlignment(Qt.AlignRight)
        self.family_size_spin.wheelEvent = lambda event: event.ignore()
        family_layout.addRow(QLabel("حجم الأسرة:"), self.family_size_spin)
        self.siblings_count_spin = QSpinBox()
        self.siblings_count_spin.setRange(0, 19)
        self.siblings_count_spin.setFixedWidth(325)
        self.siblings_count_spin.setFixedHeight(40)
        self.siblings_count_spin.setAlignment(Qt.AlignRight)
        self.siblings_count_spin.wheelEvent = lambda event: event.ignore()
        family_layout.addRow(QLabel("عدد الإخوة:"), self.siblings_count_spin)
        self.child_order_spin = QSpinBox()
        self.child_order_spin.setRange(1, 20)
        self.child_order_spin.setFixedWidth(325)
        self.child_order_spin.setFixedHeight(40)
        self.child_order_spin.setAlignment(Qt.AlignRight)
        self.child_order_spin.wheelEvent = lambda event: event.ignore()
        family_layout.addRow(QLabel("ترتيب الحالة بين الأخوة:"), self.child_order_spin)
        self.similar_cases_combo = QComboBox()
        self.similar_cases_combo.addItems(["نعم", "لا"])
        self.similar_cases_combo.currentIndexChanged.connect(self.toggle_similar_cases_who)
        self.similar_cases_combo.setFixedWidth(325)
        self.similar_cases_combo.setFixedHeight(40)
        self.similar_cases_combo.wheelEvent = lambda event: event.ignore()
        family_layout.addRow(QLabel("حالات مشابهة في العائلة؟"), self.similar_cases_combo)
        self.similar_cases_who_label = QLabel("من؟")
        self.similar_cases_who_edit = QLineEdit()
        self.similar_cases_who_edit.setFixedWidth(325)
        self.similar_cases_who_edit.setFixedHeight(40)
        family_layout.addRow(self.similar_cases_who_label, self.similar_cases_who_edit)
        self.toggle_similar_cases_who(self.similar_cases_combo.currentIndex())
        family_group.setLayout(family_layout)
        self.main_layout.addWidget(family_group)
        self.button_box = QHBoxLayout()
        self.save_button = QPushButton()
        self.save_button.setIcon(QIcon("icons/save.png"))
        self.save_button.setIconSize(QSize(32, 32))
        self.save_button.setToolTip("حفظ")
        self.save_button.clicked.connect(self.save_case_data)
        self.cancel_button = QPushButton()
        self.cancel_button.setIcon(QIcon("icons/cancel.png"))
        self.cancel_button.setIconSize(QSize(32, 32))
        self.cancel_button.setToolTip("إلغاء")
        self.cancel_button.clicked.connect(self.reject)
        self.button_box.addStretch()
        self.button_box.addWidget(self.save_button)
        self.button_box.addWidget(self.cancel_button)
        self.main_layout.addLayout(self.button_box)
        scroll.setWidget(container_widget)
        outer_layout = QVBoxLayout(self)
        outer_layout.addWidget(scroll)
        self._updating_fields = False
        self.calculate_father_age()
        self.calculate_mother_age()
        self.calculate_age()
        self.case_data_to_load = case_data_to_load
        if self.case_data_to_load:
            self.load_data_into_form(self.case_data_to_load)
        self.setTabOrder(self.child_name_edit, self.dob_edit)
        self.setTabOrder(self.dob_edit, self.gender_combo)
        self.setTabOrder(self.gender_combo, self.first_lang_edit)
        self.setTabOrder(self.first_lang_edit, self.first_lang_notes)
        self.setTabOrder(self.first_lang_notes, self.second_lang_edit)
        self.setTabOrder(self.second_lang_edit, self.second_lang_notes)
        self.setTabOrder(self.second_lang_notes, self.diagnosis_edit)
        self.setTabOrder(self.diagnosis_edit, self.diagnosed_by_edit)
        self.setTabOrder(self.diagnosed_by_edit, self.father_name_edit)
        self.setTabOrder(self.father_name_edit, self.father_dob_edit)
        self.setTabOrder(self.father_dob_edit, self.father_job_edit)
        self.setTabOrder(self.father_job_edit, self.father_health_edit)
        self.setTabOrder(self.father_health_edit, self.mother_name_edit)
        self.setTabOrder(self.mother_name_edit, self.mother_dob_edit)
        self.setTabOrder(self.mother_dob_edit, self.mother_job_edit)
        self.setTabOrder(self.mother_job_edit, self.mother_health_edit)
        self.setTabOrder(self.mother_health_edit, self.parents_relation_combo)
        self.setTabOrder(self.parents_relation_combo, self.relation_degree_edit)
        self.setTabOrder(self.relation_degree_edit, self.family_size_spin)
        self.setTabOrder(self.family_size_spin, self.siblings_count_spin)
        self.setTabOrder(self.siblings_count_spin, self.child_order_spin)
        self.setTabOrder(self.child_order_spin, self.similar_cases_combo)
        self.setTabOrder(self.similar_cases_combo, self.similar_cases_who_edit)
        self.setTabOrder(self.similar_cases_who_edit, self.save_button)
        self.setTabOrder(self.save_button, self.cancel_button)
        make_all_labels_copyable(self)
    def calculate_age(self):
        if self._updating_fields:
            return
        self._updating_fields = True
        dob_qdate = self.dob_edit.date()
        if not dob_qdate.isValid():
            self.age_label.setText("تاريخ ميلاد غير صالح")
            self._updating_fields = False
            return
        dob = date(dob_qdate.year(), dob_qdate.month(), dob_qdate.day())
        today = date.today()
        age_years = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
        age_months = (today.month - dob.month - (today.day < dob.day)) % 12
        if today.day < dob.day:
            prev_month_days = (QDate(today.year, today.month, 1).addMonths(-1)).daysInMonth()
            age_days = prev_month_days - dob.day + today.day
        else:
            age_days = today.day - dob.day
        self.age_label.setText(f"{age_years} سنة، {age_months} شهر، {age_days} يوم")
        self.calculate_pregnancy_ages()
        self._updating_fields = False
    def calculate_father_age(self):
        if self._updating_fields:
            return
        self._updating_fields = True
        father_dob_qdate = self.father_dob_edit.date()
        if not father_dob_qdate.isValid():
            self._updating_fields = False
            return
        father_dob = date(father_dob_qdate.year(), father_dob_qdate.month(), father_dob_qdate.day())
        today = date.today()
        father_age = today.year - father_dob.year - ((today.month, today.day) < (father_dob.month, father_dob.day))
        father_age_months = (today.month - father_dob.month - (today.day < father_dob.day)) % 12
        self.father_age_label.setText(f"{father_age} سنة، {father_age_months} شهر")
        self.calculate_pregnancy_ages()
        self._updating_fields = False
    def calculate_mother_age(self):
        if self._updating_fields:
            return
        self._updating_fields = True
        mother_dob_qdate = self.mother_dob_edit.date()
        if not mother_dob_qdate.isValid():
            self._updating_fields = False
            return
        mother_dob = date(mother_dob_qdate.year(), mother_dob_qdate.month(), mother_dob_qdate.day())
        today = date.today()
        mother_age = today.year - mother_dob.year - ((today.month, today.day) < (mother_dob.month, mother_dob.day))
        mother_age_months = (today.month - mother_dob.month - (today.day < mother_dob.day)) % 12
        self.mother_age_label.setText(f"{mother_age} سنة، {mother_age_months} شهر")
        self.calculate_pregnancy_ages()
        self._updating_fields = False
    def calculate_pregnancy_ages(self):
        child_dob_qdate = self.dob_edit.date()
        if not child_dob_qdate.isValid():
            return
        child_dob = date(child_dob_qdate.year(), child_dob_qdate.month(), child_dob_qdate.day())
        father_dob_qdate = self.father_dob_edit.date()
        if father_dob_qdate.isValid():
            father_dob = date(father_dob_qdate.year(), father_dob_qdate.month(), father_dob_qdate.day())
            father_preg_age = child_dob.year - father_dob.year - ((child_dob.month, child_dob.day) < (father_dob.month, father_dob.day))
            father_preg_age_months = (child_dob.month - father_dob.month - (child_dob.day < father_dob.day)) % 12
            self.father_preg_age_label.setText(f"{father_preg_age} سنة، {father_preg_age_months} شهر")
        mother_dob_qdate = self.mother_dob_edit.date()
        if mother_dob_qdate.isValid():
            mother_dob = date(mother_dob_qdate.year(), mother_dob_qdate.month(), mother_dob_qdate.day())
            mother_preg_age = child_dob.year - mother_dob.year - ((child_dob.month, child_dob.day) < (mother_dob.month, mother_dob.day))
            mother_preg_age_months = (child_dob.month - mother_dob.month - (child_dob.day < mother_dob.day)) % 12
            self.mother_preg_age_label.setText(f"{mother_preg_age} سنة، {mother_preg_age_months} شهر")
    def toggle_relation_degree(self, index):
        is_related = self.parents_relation_combo.itemText(index).startswith("نعم")
        self.relation_degree_label.setVisible(is_related)
        self.relation_degree_edit.setVisible(is_related)
    def toggle_similar_cases_who(self, index):
        has_similar = self.similar_cases_combo.itemText(index).startswith("نعم")
        self.similar_cases_who_label.setVisible(has_similar)
        self.similar_cases_who_edit.setVisible(has_similar)
    def collect_data_from_form(self):
        father_age_text = self.father_age_label.text().split(" ")[0] if self.father_age_label.text() != "يتم حسابه" else "0"
        mother_age_text = self.mother_age_label.text().split(" ")[0] if self.mother_age_label.text() != "يتم حسابه" else "0"
        try:
            father_age = int(father_age_text)
        except ValueError:
            father_age = 0
        try:
            mother_age = int(mother_age_text)
        except ValueError:
            mother_age = 0
        return {
            "child_name": self.child_name_edit.text().strip(),
            "dob": self.dob_edit.date().toString("yyyy-MM-dd"),
            "age": self.age_label.text(),
            "gender": self.gender_combo.currentText(),
            "first_language": self.first_lang_edit.currentText(),
            "first_language_notes": self.first_lang_notes.text().strip(),
            "second_language": self.second_lang_edit.currentText(),
            "second_language_notes": self.second_lang_notes.text().strip(),
            "diagnosis": self.diagnosis_edit.text().strip(),
            "diagnosed_by": self.diagnosed_by_edit.text().strip(),
            "father_name": self.father_name_edit.text().strip(),
            "father_dob": self.father_dob_edit.date().toString("yyyy-MM-dd"),
            "father_age": father_age,
            "father_job": self.father_job_edit.text().strip(),
            "father_health": self.father_health_edit.text().strip(),
            "mother_name": self.mother_name_edit.text().strip(),
            "mother_dob": self.mother_dob_edit.date().toString("yyyy-MM-dd"),
            "mother_age": mother_age,
            "mother_job": self.mother_job_edit.text().strip(),
            "mother_health": self.mother_health_edit.text().strip(),
            "father_preg_age": self.father_preg_age_label.text(),
            "mother_preg_age": self.mother_preg_age_label.text(),
            "parents_relation": self.parents_relation_combo.currentText(),
            "relation_degree": self.relation_degree_edit.currentText() if self.relation_degree_edit.isVisible() else "",
            "family_size": self.family_size_spin.value(),
            "siblings_count": self.siblings_count_spin.value(),
            "child_order": self.child_order_spin.value(),
            "similar_cases_family": self.similar_cases_combo.currentText(),
            "similar_cases_who": self.similar_cases_who_edit.text().strip() if self.similar_cases_who_edit.isVisible() else "",
        }
    def load_data_into_form(self, data):
        self._updating_fields = True
        self.child_name_edit.setText(data.get("child_name", ""))
        dob_date = QDate.fromString(data.get("dob", ""), "yyyy-MM-dd")
        if dob_date.isValid():
            self.dob_edit.setDate(dob_date)
            self.day_edit.setText("{:02}".format(dob_date.day()))
            self.month_edit.setText("{:02}".format(dob_date.month()))
            self.year_edit.setText("{:02}".format(dob_date.year()))
        self.gender_combo.setCurrentText(data.get("gender", ""))
        self.first_lang_edit.setCurrentText(data.get("first_language", ""))
        self.first_lang_notes.setText(data.get("first_language_notes", ""))
        self.second_lang_edit.setCurrentText(data.get("second_language", ""))
        self.second_lang_notes.setText(data.get("second_language_notes", ""))
        self.diagnosis_edit.setText(data.get("diagnosis", ""))
        self.diagnosed_by_edit.setText(data.get("diagnosed_by", ""))
        self.father_name_edit.setText(data.get("father_name", ""))
        father_dob_date = QDate.fromString(data.get("father_dob", ""), "yyyy-MM-dd")
        if father_dob_date.isValid():
            self.father_dob_edit.setDate(father_dob_date)
            self.father_day_edit.setText("{:02}".format(father_dob_date.day()))
            self.father_month_edit.setText("{:02}".format(father_dob_date.month()))
            self.father_year_edit.setText("{:02}".format(father_dob_date.year()))
        self.father_job_edit.setText(data.get("father_job", ""))
        self.father_health_edit.setText(data.get("father_health", ""))
        self.mother_name_edit.setText(data.get("mother_name", ""))
        mother_dob_date = QDate.fromString(data.get("mother_dob", ""), "yyyy-MM-dd")
        if mother_dob_date.isValid():
            self.mother_dob_edit.setDate(mother_dob_date)
            self.mother_day_edit.setText("{:02}".format(mother_dob_date.day()))
            self.mother_month_edit.setText("{:02}".format(mother_dob_date.month()))
            self.mother_year_edit.setText("{:02}".format(mother_dob_date.year()))
        self.mother_job_edit.setText(data.get("mother_job", ""))
        self.mother_health_edit.setText(data.get("mother_health", ""))
        self.parents_relation_combo.setCurrentText(data.get("parents_relation", ""))
        if data.get("relation_degree"):
            self.relation_degree_edit.setCurrentText(data.get("relation_degree", ""))
        self.toggle_relation_degree(self.parents_relation_combo.currentIndex())
        self.family_size_spin.setValue(data.get("family_size", 0))
        self.siblings_count_spin.setValue(data.get("siblings_count", 0))
        self.child_order_spin.setValue(data.get("child_order", 0))
        self.similar_cases_combo.setCurrentText(data.get("similar_cases_family", ""))
        self.similar_cases_who_edit.setText(data.get("similar_cases_who", ""))
        self.toggle_similar_cases_who(self.similar_cases_combo.currentIndex())
        self._updating_fields = False
        self.calculate_father_age()
        self.calculate_mother_age()
        self.calculate_age()
    def save_case_data(self):
        case_data = self.collect_data_from_form()
        if not case_data["child_name"]:
            QMessageBox.warning(self, "بيانات ناقصة", "الرجاء إدخال اسم الحالة.")
            self.child_name_edit.setFocus()
            return
        if not self.case_data_to_load:
            case_data["case_id"] = get_next_case_id()
        else:
            case_data["case_id"] = self.case_data_to_load.get("case_id")
        success, message_or_path = save_case_data_to_json(case_data)
        if success:
            QMessageBox.information(self, "تم الحفظ", message_or_path)
            self.accept()
        else:
            QMessageBox.critical(self, "خطأ في الحفظ", message_or_path)

case_viewer.py:
from PyQt5.QtWidgets import (
    QDialog, QFormLayout, QLabel, QScrollArea, QPushButton,
    QVBoxLayout, QHBoxLayout, QGroupBox, QMessageBox, QWidget,
    QListWidget, QListWidgetItem, QFileDialog
)
from PyQt5.QtCore import Qt, QDate, QSize
from datetime import date
from PyQt5.QtGui import QIcon
from .survey_form_first import SurveyFormFirst
from .case_form import CaseForm
from .pdf_exporter import export_survey_to_pdf_with_custom_path
from utils.file_manager import load_surveys_for_case, load_case_data_from_json
from utils.general import make_all_labels_copyable
class SurveyDetailViewer(QDialog):
    def __init__(self, survey_data, case_folder_name, parent=None):
        super().__init__(parent)
        self.survey_data = survey_data
        self.case_folder_name = case_folder_name
        self.setWindowTitle(f"عرض تفاصيل الاستبيان: {self.survey_data.get('survey_type')}")
        self.setMinimumWidth(450)
        self.setMinimumHeight(200)
        self.setWindowFlags(self.windowFlags() | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint)
        layout = QVBoxLayout(self)
        self.buttons_layout = QHBoxLayout()
        self.edit_button = QPushButton("تعديل الاستبيان")
        self.edit_button.clicked.connect(self.edit_survey)
        self.buttons_layout.addWidget(self.edit_button)
        self.export_pdf_button = QPushButton("تصدير إلى PDF")
        self.export_pdf_button.clicked.connect(self.export_to_pdf)
        self.buttons_layout.addWidget(self.export_pdf_button)
        layout.addLayout(self.buttons_layout)
        form_layout = QFormLayout()
        form_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        form_layout.setLabelAlignment(Qt.AlignRight)
        form_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        form_layout.addRow(QLabel("نوع الاستبيان:"), QLabel(self.survey_data.get("survey_type", "-")))
        form_layout.addRow(QLabel("تاريخ الاستبيان:"), QLabel(self.survey_data.get("survey_date", "-")))
        layout.addLayout(form_layout)
        self.button_box = QHBoxLayout()
        self.close_button = QPushButton()
        self.close_button.setIcon(QIcon("icons/close.png"))
        self.close_button.setIconSize(QSize(32, 32))
        self.close_button.setToolTip("إغلاق")
        self.close_button.clicked.connect(self.reject)
        self.button_box.addStretch()
        self.button_box.addWidget(self.close_button)
        layout.addLayout(self.button_box)
        make_all_labels_copyable(self)
    def edit_survey(self):
        survey_type = self.survey_data.get("survey_type")
        if survey_type == "استبيان التقييم الأول":
            edit_form = SurveyFormFirst(self.case_folder_name, parent=self, survey_data_to_edit=self.survey_data)
            result = edit_form.exec_()
            if result == QDialog.Accepted:
                self.accept()
        else:
            QMessageBox.warning(self, "غير مدعوم", f"تعديل هذا النوع من الاستبيانات ({survey_type}) غير مدعوم حاليًا.")
    def export_to_pdf(self):
        case_data = load_case_data_from_json(self.case_folder_name)
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        survey_type = self.survey_data.get("survey_type", "استبيان")
        survey_date = self.survey_data.get("survey_date", "").replace("-", "")
        child_name = case_data.get("child_name", "حالة") if case_data else "حالة"
        default_filename = f"{survey_type}_{child_name}_{survey_date}.pdf"
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "حفظ ملف PDF",
            default_filename,
            "PDF Files (*.pdf)",
            options=options
        )
        if file_path:
            if not file_path.lower().endswith('.pdf'):
                file_path += '.pdf'
            success, message = export_survey_to_pdf_with_custom_path(
                self.case_folder_name,
                self.survey_data,
                file_path,
                case_data_for_context=case_data
            )
            if success:
                QMessageBox.information(self, "تم التصدير", f"تم تصدير الاستبيان بنجاح")
            else:
                QMessageBox.critical(self, "خطأ في التصدير", f"فشل تصدير الاستبيان\n{message}")
class CaseViewer(QDialog):
    def __init__(self, case_data, case_folder_name, parent=None):
        super().__init__(parent)
        self.case_data = case_data
        self.case_folder_name = case_folder_name
        self.parent_main_window = parent
        child_name_display = self.case_data.get("child_name", "")
        self.setWindowTitle(f"عرض بيانات: {child_name_display}")
        self.setGeometry(250, 50, 800, 600)
        self.setWindowFlags(self.windowFlags() | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint)
        scroll = QScrollArea(self)
        scroll.setWidgetResizable(True)
        container_widget = QWidget()
        self.main_layout = QVBoxLayout(container_widget)
        child_group = QGroupBox("بيانات الحالة")
        child_layout = QFormLayout()
        child_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        child_layout.setLabelAlignment(Qt.AlignRight)
        child_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        self.child_name_label = QLabel(self.case_data.get("child_name", "-"))
        self.child_name_label.setFixedWidth(325)
        self.child_name_label.setFixedHeight(40)
        child_layout.addRow(QLabel("اسم الحالة:"), self.child_name_label)
        self.dob_label = QLabel(self.case_data.get("dob", "-"))
        self.dob_label.setFixedWidth(325)
        self.dob_label.setFixedHeight(40)
        self.dob_label.setAlignment(Qt.AlignRight)
        child_layout.addRow(QLabel("تاريخ الميلاد:"), self.dob_label)
        self.age_label = QLabel("يتم حسابه")
        child_layout.addRow(QLabel("العمر:"), self.age_label)
        self.gender_label = QLabel(self.case_data.get("gender", "-"))
        self.gender_label.setFixedWidth(325)
        self.gender_label.setFixedHeight(40)
        child_layout.addRow(QLabel("الجنس:"), self.gender_label)
        self.first_lang_label = QLabel(self.case_data.get("first_language", "-"))
        self.first_lang_label.setFixedWidth(325)
        self.first_lang_label.setFixedHeight(40)
        child_layout.addRow(QLabel("اللغة الأولى:"), self.first_lang_label)
        self.first_lang_notes_label = QLabel(self.case_data.get("first_language_notes", "-"))
        self.first_lang_notes_label.setFixedWidth(325)
        self.first_lang_notes_label.setFixedHeight(40)
        child_layout.addRow(QLabel("ملاحظات اللغة الأولى:"), self.first_lang_notes_label)
        self.second_lang_label = QLabel(self.case_data.get("second_language", "-"))
        self.second_lang_label.setFixedWidth(325)
        self.second_lang_label.setFixedHeight(40)
        child_layout.addRow(QLabel("اللغة الثانية:"), self.second_lang_label)
        self.second_lang_notes_label = QLabel(self.case_data.get("second_language_notes", "-"))
        self.second_lang_notes_label.setFixedWidth(325)
        self.second_lang_notes_label.setFixedHeight(40)
        child_layout.addRow(QLabel("ملاحظات اللغة الثانية:"), self.second_lang_notes_label)
        self.diagnosis_label = QLabel(self.case_data.get("diagnosis", "-"))
        self.diagnosis_label.setFixedWidth(325)
        self.diagnosis_label.setFixedHeight(40)
        child_layout.addRow(QLabel("التشخيص:"), self.diagnosis_label)
        self.diagnosed_by_label = QLabel(self.case_data.get("diagnosed_by", "-"))
        self.diagnosed_by_label.setFixedWidth(325)
        self.diagnosed_by_label.setFixedHeight(40)
        child_layout.addRow(QLabel("بواسطة:"), self.diagnosed_by_label)
        child_group.setLayout(child_layout)
        self.main_layout.addWidget(child_group)
        parents_group = QGroupBox("بيانات الوالدين")
        parents_layout = QFormLayout()
        parents_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        parents_layout.setLabelAlignment(Qt.AlignRight)
        parents_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        self.father_name_label = QLabel(self.case_data.get("father_name", "-"))
        self.father_name_label.setFixedWidth(325)
        self.father_name_label.setFixedHeight(40)
        parents_layout.addRow(QLabel("اسم الأب:"), self.father_name_label)
        self.father_dob_label = QLabel(self.case_data.get("father_dob", "-"))
        self.father_dob_label.setFixedWidth(325)
        self.father_dob_label.setFixedHeight(40)
        self.father_dob_label.setAlignment(Qt.AlignRight)
        parents_layout.addRow(QLabel("تاريخ ميلاد الأب:"), self.father_dob_label)
        self.father_age_label = QLabel("يتم حسابه")
        parents_layout.addRow(QLabel("عمر الأب:"), self.father_age_label)
        self.father_job_label = QLabel(self.case_data.get("father_job", "-"))
        self.father_job_label.setFixedWidth(325)
        self.father_job_label.setFixedHeight(40)
        parents_layout.addRow(QLabel("وظيفة الأب:"), self.father_job_label)
        self.father_health_label = QLabel(self.case_data.get("father_health", "-"))
        self.father_health_label.setFixedWidth(325)
        self.father_health_label.setFixedHeight(40)
        parents_layout.addRow(QLabel("الحالة الصحية للأب:"), self.father_health_label)
        self.mother_name_label = QLabel(self.case_data.get("mother_name", "-"))
        self.mother_name_label.setFixedWidth(325)
        self.mother_name_label.setFixedHeight(40)
        parents_layout.addRow(QLabel("اسم الأم:"), self.mother_name_label)
        self.mother_dob_label = QLabel(self.case_data.get("mother_dob", "-"))
        self.mother_dob_label.setFixedWidth(325)
        self.mother_dob_label.setFixedHeight(40)
        self.mother_dob_label.setAlignment(Qt.AlignRight)
        parents_layout.addRow(QLabel("تاريخ ميلاد الأم:"), self.mother_dob_label)
        self.mother_age_label = QLabel("يتم حسابه")
        parents_layout.addRow(QLabel("عمر الأم:"), self.mother_age_label)
        self.mother_job_label = QLabel(self.case_data.get("mother_job", "-"))
        self.mother_job_label.setFixedWidth(325)
        self.mother_job_label.setFixedHeight(40)
        parents_layout.addRow(QLabel("وظيفة الأم:"), self.mother_job_label)
        self.mother_health_label = QLabel(self.case_data.get("mother_health", "-"))
        self.mother_health_label.setFixedWidth(325)
        self.mother_health_label.setFixedHeight(40)
        parents_layout.addRow(QLabel("الحالة الصحية للأم:"), self.mother_health_label)
        self.father_preg_age_label = QLabel("يتم حسابه")
        parents_layout.addRow(QLabel("عمر الأب عند الولادة:"), self.father_preg_age_label)
        self.mother_preg_age_label = QLabel("يتم حسابه")
        parents_layout.addRow(QLabel("عمر الأم عند الولادة:"), self.mother_preg_age_label)
        self.parents_relation_label = QLabel(self.case_data.get("parents_relation", "-"))
        self.parents_relation_label.setFixedWidth(325)
        self.parents_relation_label.setFixedHeight(40)
        parents_layout.addRow(QLabel("صلة قرابة بين الوالدين؟"), self.parents_relation_label)
        if self.case_data.get("parents_relation") == "نعم":
            self.relation_degree_label = QLabel("درجة القرابة:")
            self.relation_degree_value = QLabel(self.case_data.get("relation_degree", "-"))
            self.relation_degree_value.setFixedWidth(325)
            self.relation_degree_value.setFixedHeight(40)
            parents_layout.addRow(self.relation_degree_label, self.relation_degree_value)
        parents_group.setLayout(parents_layout)
        self.main_layout.addWidget(parents_group)
        family_group = QGroupBox("معلومات الأسرة")
        family_layout = QFormLayout()
        family_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        family_layout.setLabelAlignment(Qt.AlignRight)
        family_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        self.family_size_label = QLabel(str(self.case_data.get("family_size", "-")))
        self.family_size_label.setFixedWidth(325)
        self.family_size_label.setFixedHeight(40)
        self.family_size_label.setAlignment(Qt.AlignRight)
        family_layout.addRow(QLabel("حجم الأسرة:"), self.family_size_label)
        self.siblings_count_label = QLabel(str(self.case_data.get("siblings_count", "-")))
        self.siblings_count_label.setFixedWidth(325)
        self.siblings_count_label.setFixedHeight(40)
        self.siblings_count_label.setAlignment(Qt.AlignRight)
        family_layout.addRow(QLabel("عدد الإخوة:"), self.siblings_count_label)
        self.child_order_label = QLabel(str(self.case_data.get("child_order", "-")))
        self.child_order_label.setFixedWidth(325)
        self.child_order_label.setFixedHeight(40)
        self.child_order_label.setAlignment(Qt.AlignRight)
        family_layout.addRow(QLabel("ترتيب الحالة بين الأخوة:"), self.child_order_label)
        self.similar_cases_label = QLabel(self.case_data.get("similar_cases_family", "-"))
        self.similar_cases_label.setFixedWidth(325)
        self.similar_cases_label.setFixedHeight(40)
        family_layout.addRow(QLabel("حالات مشابهة في العائلة؟"), self.similar_cases_label)
        if self.case_data.get("similar_cases_family") == "نعم":
            self.similar_cases_who_label = QLabel("من؟")
            self.similar_cases_who_value = QLabel(self.case_data.get("similar_cases_who", "-"))
            self.similar_cases_who_value.setFixedWidth(325)
            self.similar_cases_who_value.setFixedHeight(40)
            family_layout.addRow(self.similar_cases_who_label, self.similar_cases_who_value)
        family_group.setLayout(family_layout)
        self.main_layout.addWidget(family_group)
        self.button_box = QHBoxLayout()
        self.edit_button = QPushButton()
        self.edit_button.setIcon(QIcon("icons/edit.png"))
        self.edit_button.setIconSize(QSize(32, 32))
        self.edit_button.setToolTip("تعديل بيانات الحالة")
        self.edit_button.clicked.connect(self.edit_case_data)
        self.close_button = QPushButton()
        self.close_button.setIcon(QIcon("icons/close.png"))
        self.close_button.setIconSize(QSize(32, 32))
        self.close_button.setToolTip("إغلاق")
        self.close_button.clicked.connect(self.reject)
        self.button_box.addStretch()
        self.button_box.addWidget(self.edit_button)
        self.button_box.addWidget(self.close_button)
        self.main_layout.addLayout(self.button_box)
        self.setup_surveys_section()
        scroll.setWidget(container_widget)
        outer_layout = QVBoxLayout(self)
        outer_layout.addWidget(scroll)
        self.setTabOrder(self.edit_button, self.close_button)
        self.calculate_all_ages()
        self.load_and_display_surveys()
        self.apply_styles()
        make_all_labels_copyable(self)
    def calculate_all_ages(self):
        self.calculate_age()
        self.calculate_father_age()
        self.calculate_mother_age()
        self.calculate_pregnancy_ages()
    def calculate_age(self):
        dob_str = self.case_data.get("dob", "")
        if not dob_str:
            self.age_label.setText("تاريخ ميلاد غير متوفر")
            return
        try:
            dob_parts = dob_str.split("-")
            if len(dob_parts) != 3:
                self.age_label.setText("تاريخ ميلاد غير صالح")
                return
            dob_qdate = QDate(int(dob_parts[0]), int(dob_parts[1]), int(dob_parts[2]))
            if not dob_qdate.isValid():
                self.age_label.setText("تاريخ ميلاد غير صالح")
                return
            dob = date(dob_qdate.year(), dob_qdate.month(), dob_qdate.day())
            today = date.today()
            age_years = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
            age_months = (today.month - dob.month - (today.day < dob.day)) % 12
            if today.day < dob.day:
                prev_month_days = (QDate(today.year, today.month, 1).addMonths(-1)).daysInMonth()
                age_days = prev_month_days - dob.day + today.day
            else:
                age_days = today.day - dob.day
            self.age_label.setText(f"{age_years} سنة، {age_months} شهر، {age_days} يوم")
        except Exception as e:
            print(f"Error calculating age: {str(e)}")
            self.age_label.setText("خطأ في حساب العمر")
    def calculate_father_age(self):
        father_dob_str = self.case_data.get("father_dob", "")
        if not father_dob_str:
            self.father_age_label.setText("-")
            return
        try:
            dob_parts = father_dob_str.split("-")
            if len(dob_parts) != 3:
                self.father_age_label.setText("تاريخ ميلاد غير صالح")
                return
            father_dob_qdate = QDate(int(dob_parts[0]), int(dob_parts[1]), int(dob_parts[2]))
            if not father_dob_qdate.isValid():
                self.father_age_label.setText("تاريخ ميلاد غير صالح")
                return
            father_dob = date(father_dob_qdate.year(), father_dob_qdate.month(), father_dob_qdate.day())
            today = date.today()
            father_age = today.year - father_dob.year - ((today.month, today.day) < (father_dob.month, father_dob.day))
            father_age_months = (today.month - father_dob.month - (today.day < father_dob.day)) % 12
            self.father_age_label.setText(f"{father_age} سنة، {father_age_months} شهر")
        except Exception as e:
            print(f"Error calculating father age: {str(e)}")
            self.father_age_label.setText("خطأ في حساب العمر")
    def calculate_mother_age(self):
        mother_dob_str = self.case_data.get("mother_dob", "")
        if not mother_dob_str:
            self.mother_age_label.setText("-")
            return
        try:
            dob_parts = mother_dob_str.split("-")
            if len(dob_parts) != 3:
                self.mother_age_label.setText("تاريخ ميلاد غير صالح")
                return
            mother_dob_qdate = QDate(int(dob_parts[0]), int(dob_parts[1]), int(dob_parts[2]))
            if not mother_dob_qdate.isValid():
                self.mother_age_label.setText("تاريخ ميلاد غير صالح")
                return
            mother_dob = date(mother_dob_qdate.year(), mother_dob_qdate.month(), mother_dob_qdate.day())
            today = date.today()
            mother_age = today.year - mother_dob.year - ((today.month, today.day) < (mother_dob.month, mother_dob.day))
            mother_age_months = (today.month - mother_dob.month - (today.day < mother_dob.day)) % 12
            self.mother_age_label.setText(f"{mother_age} سنة، {mother_age_months} شهر")
        except Exception as e:
            print(f"Error calculating mother age: {str(e)}")
            self.mother_age_label.setText("خطأ في حساب العمر")
    def calculate_pregnancy_ages(self):
        child_dob_str = self.case_data.get("dob", "")
        if not child_dob_str:
            self.father_preg_age_label.setText("-")
            self.mother_preg_age_label.setText("-")
            return
        try:
            child_dob_parts = child_dob_str.split("-")
            if len(child_dob_parts) != 3:
                return
            child_dob_qdate = QDate(int(child_dob_parts[0]), int(child_dob_parts[1]), int(child_dob_parts[2]))
            if not child_dob_qdate.isValid():
                return
            child_dob = date(child_dob_qdate.year(), child_dob_qdate.month(), child_dob_qdate.day())
            father_dob_str = self.case_data.get("father_dob", "")
            if father_dob_str:
                father_dob_parts = father_dob_str.split("-")
                if len(father_dob_parts) == 3:
                    father_dob_qdate = QDate(int(father_dob_parts[0]), int(father_dob_parts[1]), int(father_dob_parts[2]))
                    if father_dob_qdate.isValid():
                        father_dob = date(father_dob_qdate.year(), father_dob_qdate.month(), father_dob_qdate.day())
                        father_preg_age = child_dob.year - father_dob.year - ((child_dob.month, child_dob.day) < (father_dob.month, father_dob.day))
                        father_preg_age_months = (child_dob.month - father_dob.month - (child_dob.day < father_dob.day)) % 12
                        self.father_preg_age_label.setText(f"{father_preg_age} سنة، {father_preg_age_months} شهر")
            mother_dob_str = self.case_data.get("mother_dob", "")
            if mother_dob_str:
                mother_dob_parts = mother_dob_str.split("-")
                if len(mother_dob_parts) == 3:
                    mother_dob_qdate = QDate(int(mother_dob_parts[0]), int(mother_dob_parts[1]), int(mother_dob_parts[2]))
                    if mother_dob_qdate.isValid():
                        mother_dob = date(mother_dob_qdate.year(), mother_dob_qdate.month(), mother_dob_qdate.day())
                        mother_preg_age = child_dob.year - mother_dob.year - ((child_dob.month, child_dob.day) < (mother_dob.month, mother_dob.day))
                        mother_preg_age_months = (child_dob.month - mother_dob.month - (child_dob.day < mother_dob.day)) % 12
                        self.mother_preg_age_label.setText(f"{mother_preg_age} سنة، {mother_preg_age_months} شهر")
        except Exception as e:
            print(f"Error calculating pregnancy ages: {str(e)}")
            self.father_preg_age_label.setText("خطأ في حساب العمر")
            self.mother_preg_age_label.setText("خطأ في حساب العمر")
    def setup_surveys_section(self):
        self.surveys_group = QGroupBox("الاستبيانات والجلسات")
        self.surveys_layout = QVBoxLayout()
        self.survey_buttons_layout = QHBoxLayout()
        self.btn_add_first_survey = QPushButton("استبيان التقييم الأول")
        self.btn_add_first_survey.setFixedWidth(200)
        self.btn_add_first_survey.clicked.connect(self.add_first_survey)
        self.survey_buttons_layout.addWidget(self.btn_add_first_survey)
        self.survey_buttons_layout.addStretch()
        self.surveys_layout.addLayout(self.survey_buttons_layout)
        self.survey_list_widget = QListWidget()
        self.survey_list_widget.itemDoubleClicked.connect(self.view_selected_survey)
        self.survey_list_widget.setFixedHeight(200)
        self.surveys_layout.addWidget(self.survey_list_widget)
        self.surveys_group.setLayout(self.surveys_layout)
        self.main_layout.addWidget(self.surveys_group)
    def load_and_display_surveys(self):
        self.survey_list_widget.clear()
        surveys = load_surveys_for_case(self.case_folder_name)
        if surveys:
            for survey_data in surveys:
                survey_type = survey_data.get("survey_type", "غير معروف")
                survey_date = survey_data.get("survey_date", "غير معروف")
                item_text = f'{survey_type} - {survey_date}'
                list_item = QListWidgetItem(item_text)
                list_item.setData(Qt.UserRole, survey_data)
                self.survey_list_widget.addItem(list_item)
        else:
            self.survey_list_widget.addItem("لا توجد استبيانات مسجلة لهذه الحالة.")
            self.survey_list_widget.setEnabled(False)
    def add_first_survey(self):
        survey_form = SurveyFormFirst(self.case_folder_name, parent=self)
        if survey_form.exec_() == QDialog.Accepted:
            self.load_and_display_surveys()
            self.survey_list_widget.setEnabled(True)
    def view_selected_survey(self, item):
        survey_data = item.data(Qt.UserRole)
        if survey_data:
            detail_viewer = SurveyDetailViewer(survey_data, self.case_folder_name, parent=self)
            result = detail_viewer.exec_()
            if result == QDialog.Accepted:
                self.load_and_display_surveys()
        else:
            QMessageBox.warning(self, "خطأ", "لا يمكن عرض تفاصيل الاستبيان.")
    def edit_case_data(self):
        edit_form = CaseForm(parent=self, case_data_to_load=self.case_data)
        result = edit_form.exec_()
        if result == QDialog.Accepted:
            updated_case_data = load_case_data_from_json(self.case_folder_name)
            if updated_case_data:
                self.case_data = updated_case_data
                self.update_display_with_new_data()
                self.accept()
            else:
                QMessageBox.warning(self, "خطأ", "فشل تحديث بيانات الحالة.")
    def update_display_with_new_data(self):
        self.child_name_label.setText(self.case_data.get("child_name", "-"))
        self.dob_label.setText(self.case_data.get("dob", "-"))
        self.gender_label.setText(self.case_data.get("gender", "-"))
        self.first_lang_label.setText(self.case_data.get("first_language", "-"))
        self.first_lang_notes_label.setText(self.case_data.get("first_language_notes", "-"))
        self.second_lang_label.setText(self.case_data.get("second_language", "-"))
        self.second_lang_notes_label.setText(self.case_data.get("second_language_notes", "-"))
        self.diagnosis_label.setText(self.case_data.get("diagnosis", "-"))
        self.diagnosed_by_label.setText(self.case_data.get("diagnosed_by", "-"))
        self.father_name_label.setText(self.case_data.get("father_name", "-"))
        self.father_dob_label.setText(self.case_data.get("father_dob", "-"))
        self.father_job_label.setText(self.case_data.get("father_job", "-"))
        self.father_health_label.setText(self.case_data.get("father_health", "-"))
        self.mother_name_label.setText(self.case_data.get("mother_name", "-"))
        self.mother_dob_label.setText(self.case_data.get("mother_dob", "-"))
        self.mother_job_label.setText(self.case_data.get("mother_job", "-"))
        self.mother_health_label.setText(self.case_data.get("mother_health", "-"))
        self.parents_relation_label.setText(self.case_data.get("parents_relation", "-"))
        self.family_size_label.setText(str(self.case_data.get("family_size", "-")))
        self.siblings_count_label.setText(str(self.case_data.get("siblings_count", "-")))
        self.child_order_label.setText(str(self.case_data.get("child_order", "-")))
        self.similar_cases_label.setText(self.case_data.get("similar_cases_family", "-"))
        self.calculate_all_ages()
    def apply_styles(self):
        self.setStyleSheet("""""")

survey_form_first.py:
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QFormLayout, QHBoxLayout, QScrollArea,
    QDateEdit, QPushButton, QMessageBox, QLabel, QComboBox,
    QLineEdit, QGroupBox, QWidget
)
from PyQt5.QtCore import QDate, Qt, QSize
from PyQt5.QtGui import QIcon
from datetime import datetime
from utils.file_manager import save_survey_data_to_json, load_case_data_from_json
from utils.general import make_all_labels_copyable
class SurveyFormFirst(QDialog):
    def __init__(self, case_folder_name, parent=None, survey_data_to_edit=None):
        super().__init__(parent)
        self.case_folder_name = case_folder_name
        self.survey_data_to_edit = survey_data_to_edit
        self.case_data = load_case_data_from_json(case_folder_name)
        if not self.case_data:
            QMessageBox.critical(self, "خطأ", "فشل تحميل بيانات الحالة.")
            self.reject()
            return
        self.setWindowTitle("استبيان التقييم الأول")
        self.setGeometry(250, 50, 800, 600)
        self.setWindowFlags(self.windowFlags() | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint)
        self.setWindowState(Qt.WindowMaximized)
        scroll = QScrollArea(self)
        scroll.setWidgetResizable(True)
        container_widget = QWidget()
        self.main_layout = QVBoxLayout(container_widget)
        self.setup_case_info_section()
        self.setup_survey_fields()
        self.button_box = QHBoxLayout()
        self.save_button = QPushButton()
        self.save_button.setIcon(QIcon("icons/save.png"))
        self.save_button.setIconSize(QSize(32, 32))
        self.save_button.setToolTip("حفظ")
        self.save_button.clicked.connect(self.save_survey_data)
        self.cancel_button = QPushButton()
        self.cancel_button.setIcon(QIcon("icons/cancel.png"))
        self.cancel_button.setIconSize(QSize(32, 32))
        self.cancel_button.setToolTip("إلغاء")
        self.cancel_button.clicked.connect(self.reject)
        self.button_box.addStretch()
        self.button_box.addWidget(self.save_button)
        self.button_box.addWidget(self.cancel_button)
        self.main_layout.addLayout(self.button_box)
        scroll.setWidget(container_widget)
        outer_layout = QVBoxLayout(self)
        outer_layout.addWidget(scroll)
        if self.survey_data_to_edit:
            self.load_survey_data()
        self.apply_styles()
        make_all_labels_copyable(self)
    def setup_case_info_section(self):
        case_info_group = QGroupBox("معلومات الحالة")
        case_info_layout = QFormLayout()
        case_info_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        case_info_layout.setLabelAlignment(Qt.AlignRight)
        case_info_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        child_name = self.case_data.get("child_name", "-")
        dob = self.case_data.get("dob", "-")
        gender = self.case_data.get("gender", "-")
        case_id = self.case_data.get("case_id", "-")
        case_info_layout.addRow(QLabel("اسم الحالة:"), QLabel(child_name))
        case_info_layout.addRow(QLabel("تاريخ الميلاد:"), QLabel(dob))
        case_info_layout.addRow(QLabel("الجنس:"), QLabel(gender))
        case_info_layout.addRow(QLabel("رقم الحالة:"), QLabel(str(case_id)))
        case_info_group.setLayout(case_info_layout)
        self.main_layout.addWidget(case_info_group)
    def setup_survey_fields(self):
        survey_group = QGroupBox("استبيان التقييم الأول")
        survey_layout = QFormLayout()
        survey_layout.setRowWrapPolicy(QFormLayout.DontWrapRows)
        survey_layout.setLabelAlignment(Qt.AlignRight)
        survey_layout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
        self.survey_date_label = QLabel("تاريخ التقيم:")
        self.survey_date_edit = QDateEdit()
        self.survey_date_edit.setDate(QDate.currentDate())
        self.survey_date_edit.setCalendarPopup(True)
        self.survey_date_edit.setDisplayFormat("yyyy-MM-dd")
        self.survey_date_edit.setFixedWidth(325)
        self.survey_date_edit.setFixedHeight(40)
        survey_layout.addRow(self.survey_date_label, self.survey_date_edit)
        self.school_attendance_label = QLabel("هل يذهب الى (المدرسة \\ الحضانة):")
        self.school_attendance_combo = QComboBox()
        self.school_attendance_combo.addItems(["نعم", "لا"])
        self.school_attendance_combo.setFixedWidth(325)
        self.school_attendance_combo.setFixedHeight(40)
        survey_layout.addRow(self.school_attendance_label, self.school_attendance_combo)
        self.school_year_label = QLabel("العام الدراسى:")
        self.school_year_edit = QLineEdit()
        self.school_year_edit.setFixedWidth(325)
        self.school_year_edit.setFixedHeight(40)
        survey_layout.addRow(self.school_year_label, self.school_year_edit)
        self.school_duration_label = QLabel("المدى التى قضاها:")
        self.school_duration_edit = QLineEdit()
        self.school_duration_edit.setFixedWidth(325)
        self.school_duration_edit.setFixedHeight(40)
        survey_layout.addRow(self.school_duration_label, self.school_duration_edit)
        self.school_type_label = QLabel("نوعها:")
        self.school_type_edit = QLineEdit()
        self.school_type_edit.setFixedWidth(325)
        self.school_type_edit.setFixedHeight(40)
        survey_layout.addRow(self.school_type_label, self.school_type_edit)
        self.school_discontinue_label = QLabel("سبب عدم الاستمرار:")
        self.school_discontinue_edit = QLineEdit()
        self.school_discontinue_edit.setFixedWidth(325)
        self.school_discontinue_edit.setFixedHeight(40)
        survey_layout.addRow(self.school_discontinue_label, self.school_discontinue_edit)
        self.care_center_label = QLabel("هل يذهب الى (مركز \\ اكاديمية رعاية):")
        self.care_center_combo = QComboBox()
        self.care_center_combo.addItems(["نعم", "لا"])
        self.care_center_combo.setFixedWidth(325)
        self.care_center_combo.setFixedHeight(40)
        survey_layout.addRow(self.care_center_label, self.care_center_combo)
        self.care_duration_label = QLabel("المدى التى قضاها:")
        self.care_duration_edit = QLineEdit()
        self.care_duration_edit.setFixedWidth(325)
        self.care_duration_edit.setFixedHeight(40)
        survey_layout.addRow(self.care_duration_label, self.care_duration_edit)
        self.care_type_label = QLabel("نوعها:")
        self.care_type_edit = QLineEdit()
        self.care_type_edit.setFixedWidth(325)
        self.care_type_edit.setFixedHeight(40)
        survey_layout.addRow(self.care_type_label, self.care_type_edit)
        self.care_discontinue_label = QLabel("سبب عدم الاستمرار:")
        self.care_discontinue_edit = QLineEdit()
        self.care_discontinue_edit.setFixedWidth(325)
        self.care_discontinue_edit.setFixedHeight(40)
        survey_layout.addRow(self.care_discontinue_label, self.care_discontinue_edit)
        self.academic_issues_label = QLabel("هل يوجد مشاكل فى التحصيل الدراسى:")
        self.academic_issues_combo = QComboBox()
        self.academic_issues_combo.addItems(["نعم", "لا"])
        self.academic_issues_combo.setFixedWidth(325)
        self.academic_issues_combo.setFixedHeight(40)
        survey_layout.addRow(self.academic_issues_label, self.academic_issues_combo)
        self.academic_issues_type_label = QLabel("نوعها:")
        self.academic_issues_type_edit = QLineEdit()
        self.academic_issues_type_edit.setFixedWidth(325)
        self.academic_issues_type_edit.setFixedHeight(40)
        survey_layout.addRow(self.academic_issues_type_label, self.academic_issues_type_edit)
        self.abnormal_dev_label = QLabel("هل كانت هناك اشارات تدل على نمو غير طبيعى:")
        self.abnormal_dev_edit = QLineEdit()
        self.abnormal_dev_edit.setFixedWidth(325)
        self.abnormal_dev_edit.setFixedHeight(40)
        survey_layout.addRow(self.abnormal_dev_label, self.abnormal_dev_edit)
        self.abnormal_dev_what_label = QLabel("ما هى:")
        self.abnormal_dev_what_edit = QLineEdit()
        self.abnormal_dev_what_edit.setFixedWidth(325)
        self.abnormal_dev_what_edit.setFixedHeight(40)
        survey_layout.addRow(self.abnormal_dev_what_label, self.abnormal_dev_what_edit)
        self.diagnosis_what_label = QLabel("ما هو تشخيصه:")
        self.diagnosis_what_edit = QLineEdit()
        self.diagnosis_what_edit.setFixedWidth(325)
        self.diagnosis_what_edit.setFixedHeight(40)
        survey_layout.addRow(self.diagnosis_what_label, self.diagnosis_what_edit)
        self.breastfeeding_duration_label = QLabel("مدة الرضاعة:")
        self.breastfeeding_duration_edit = QLineEdit()
        self.breastfeeding_duration_edit.setFixedWidth(325)
        self.breastfeeding_duration_edit.setFixedHeight(40)
        survey_layout.addRow(self.breastfeeding_duration_label, self.breastfeeding_duration_edit)
        self.breastfeeding_type_label = QLabel("نوع الرضاعة:")
        self.breastfeeding_type_combo = QComboBox()
        self.breastfeeding_type_combo.addItems(["طبيعى", "صناعى"])
        self.breastfeeding_type_combo.setFixedWidth(325)
        self.breastfeeding_type_combo.setFixedHeight(40)
        survey_layout.addRow(self.breastfeeding_type_label, self.breastfeeding_type_combo)
        self.weaning_label = QLabel("الفطام:")
        self.weaning_combo = QComboBox()
        self.weaning_combo.addItems(["تدريجى", "مفاجئ"])
        self.weaning_combo.setFixedWidth(325)
        self.weaning_combo.setFixedHeight(40)
        survey_layout.addRow(self.weaning_label, self.weaning_combo)
        self.weaning_age_label = QLabel("سن الفطام:")
        self.weaning_age_edit = QLineEdit()
        self.weaning_age_edit.setFixedWidth(325)
        self.weaning_age_edit.setFixedHeight(40)
        survey_layout.addRow(self.weaning_age_label, self.weaning_age_edit)
        self.breastfeeding_problems_label = QLabel("هل وجد مشاكل بالرضاعة:")
        self.breastfeeding_problems_edit = QLineEdit()
        self.breastfeeding_problems_edit.setFixedWidth(325)
        self.breastfeeding_problems_edit.setFixedHeight(40)
        survey_layout.addRow(self.breastfeeding_problems_label, self.breastfeeding_problems_edit)
        self.teething_label = QLabel("التسنين:")
        self.teething_edit = QLineEdit()
        self.teething_edit.setFixedWidth(325)
        self.teething_edit.setFixedHeight(40)
        survey_layout.addRow(self.teething_label, self.teething_edit)
        self.crawling_label = QLabel("الحبو:")
        self.crawling_edit = QLineEdit()
        self.crawling_edit.setFixedWidth(325)
        self.crawling_edit.setFixedHeight(40)
        survey_layout.addRow(self.crawling_label, self.crawling_edit)
        self.sitting_label = QLabel("الجلوس:")
        self.sitting_edit = QLineEdit()
        self.sitting_edit.setFixedWidth(325)
        self.sitting_edit.setFixedHeight(40)
        survey_layout.addRow(self.sitting_label, self.sitting_edit)
        self.standing_label = QLabel("الوقوف:")
        self.standing_edit = QLineEdit()
        self.standing_edit.setFixedWidth(325)
        self.standing_edit.setFixedHeight(40)
        survey_layout.addRow(self.standing_label, self.standing_edit)
        self.walking_start_label = QLabel("بدا المشى:")
        self.walking_start_edit = QLineEdit()
        self.walking_start_edit.setFixedWidth(325)
        self.walking_start_edit.setFixedHeight(40)
        survey_layout.addRow(self.walking_start_label, self.walking_start_edit)
        self.walking_label = QLabel("المشى:")
        self.walking_edit = QLineEdit()
        self.walking_edit.setFixedWidth(325)
        self.walking_edit.setFixedHeight(40)
        survey_layout.addRow(self.walking_label, self.walking_edit)
        self.diaper_free_label = QLabel("متى تخلص من الحفاظ:")
        self.diaper_free_edit = QLineEdit()
        self.diaper_free_edit.setFixedWidth(325)
        self.diaper_free_edit.setFixedHeight(40)
        survey_layout.addRow(self.diaper_free_label, self.diaper_free_edit)
        self.bathroom_request_label = QLabel("استخدام الحمام الان:")
        self.bathroom_request_combo = QComboBox()
        self.bathroom_request_combo.addItems(["يطلب لفظيا", "بالاشارة", "يحتاج تدريب"])
        self.bathroom_request_combo.setFixedWidth(325)
        self.bathroom_request_combo.setFixedHeight(40)
        survey_layout.addRow(self.bathroom_request_label, self.bathroom_request_combo)
        self.bathroom_independence_label = QLabel("يدخل الحمام:")
        self.bathroom_independence_combo = QComboBox()
        self.bathroom_independence_combo.addItems(["وحدة", "مساعدة جزئية", "مساعدة كلية"])
        self.bathroom_independence_combo.setFixedWidth(325)
        self.bathroom_independence_combo.setFixedHeight(40)
        survey_layout.addRow(self.bathroom_independence_label, self.bathroom_independence_combo)
        self.vision_issues_label = QLabel("هل يعانى من اي ضعف فى درجة الابصار؟")
        self.vision_issues_combo = QComboBox()
        self.vision_issues_combo.addItems(["نعم", "لا"])
        self.vision_issues_combo.setFixedWidth(325)
        self.vision_issues_combo.setFixedHeight(40)
        survey_layout.addRow(self.vision_issues_label, self.vision_issues_combo)
        self.vision_type_label = QLabel("نوعه:")
        self.vision_type_edit = QLineEdit()
        self.vision_type_edit.setFixedWidth(325)
        self.vision_type_edit.setFixedHeight(40)
        survey_layout.addRow(self.vision_type_label, self.vision_type_edit)
        self.vision_severity_label = QLabel("شدته:")
        self.vision_severity_edit = QLineEdit()
        self.vision_severity_edit.setFixedWidth(325)
        self.vision_severity_edit.setFixedHeight(40)
        survey_layout.addRow(self.vision_severity_label, self.vision_severity_edit)
        self.hearing_issues_label = QLabel("هل يعانى من ضعف سمع؟")
        self.hearing_issues_combo = QComboBox()
        self.hearing_issues_combo.addItems(["نعم", "لا"])
        self.hearing_issues_combo.setFixedWidth(325)
        self.hearing_issues_combo.setFixedHeight(40)
        survey_layout.addRow(self.hearing_issues_label, self.hearing_issues_combo)
        self.hearing_type_label = QLabel("نوعه:")
        self.hearing_type_combo = QComboBox()
        self.hearing_type_combo.addItems(["توصيلى", "حسى عصبى", "مركزى", "مختلط"])
        self.hearing_type_combo.setFixedWidth(325)
        self.hearing_type_combo.setFixedHeight(40)
        survey_layout.addRow(self.hearing_type_label, self.hearing_type_combo)
        self.hearing_severity_label = QLabel("شدته:")
        self.hearing_severity_edit = QLineEdit()
        self.hearing_severity_edit.setFixedWidth(325)
        self.hearing_severity_edit.setFixedHeight(40)
        survey_layout.addRow(self.hearing_severity_label, self.hearing_severity_edit)
        self.hearing_aid_label = QLabel("هل يلبس سماعات؟")
        self.hearing_aid_combo = QComboBox()
        self.hearing_aid_combo.addItems(["نعم", "لا"])
        self.hearing_aid_combo.setFixedWidth(325)
        self.hearing_aid_combo.setFixedHeight(40)
        survey_layout.addRow(self.hearing_aid_label, self.hearing_aid_combo)
        self.hearing_aid_type_label = QLabel("نوعها:")
        self.hearing_aid_type_edit = QLineEdit()
        self.hearing_aid_type_edit.setFixedWidth(325)
        self.hearing_aid_type_edit.setFixedHeight(40)
        survey_layout.addRow(self.hearing_aid_type_label, self.hearing_aid_type_edit)
        self.cochlear_implant_label = QLabel("هل يلبس قوقعة؟")
        self.cochlear_implant_combo = QComboBox()
        self.cochlear_implant_combo.addItems(["نعم", "لا"])
        self.cochlear_implant_combo.setFixedWidth(325)
        self.cochlear_implant_combo.setFixedHeight(40)
        survey_layout.addRow(self.cochlear_implant_label, self.cochlear_implant_combo)
        self.cochlear_since_label = QLabel("من امتى؟")
        self.cochlear_since_edit = QLineEdit()
        self.cochlear_since_edit.setFixedWidth(325)
        self.cochlear_since_edit.setFixedHeight(40)
        survey_layout.addRow(self.cochlear_since_label, self.cochlear_since_edit)
        self.speech_tone_label = QLabel("هل يتحدث الطفل بنبرة صوت ثابتة معينة:")
        self.speech_tone_combo = QComboBox()
        self.speech_tone_combo.addItems(["نعم", "لا"])
        self.speech_tone_combo.setFixedWidth(325)
        self.speech_tone_combo.setFixedHeight(40)
        survey_layout.addRow(self.speech_tone_label, self.speech_tone_combo)
        self.speech_volume_label = QLabel("هل يتحدث الطفل بصوت:")
        self.speech_volume_combo = QComboBox()
        self.speech_volume_combo.addItems(["مرتفع", "منخفض"])
        self.speech_volume_combo.setFixedWidth(325)
        self.speech_volume_combo.setFixedHeight(40)
        survey_layout.addRow(self.speech_volume_label, self.speech_volume_combo)
        self.drooling_label = QLabel("هل يعانى الطفل من سيلان اللعاب:")
        self.drooling_combo = QComboBox()
        self.drooling_combo.addItems(["نعم", "لا"])
        self.drooling_combo.setFixedWidth(325)
        self.drooling_combo.setFixedHeight(40)
        survey_layout.addRow(self.drooling_label, self.drooling_combo)
        self.swallowing_label = QLabel("يعانى الطفل من صعوبة بلع:")
        self.swallowing_combo = QComboBox()
        self.swallowing_combo.addItems(["نعم", "لا"])
        self.swallowing_combo.setFixedWidth(325)
        self.swallowing_combo.setFixedHeight(40)
        survey_layout.addRow(self.swallowing_label, self.swallowing_combo)
        self.breathing_label = QLabel("هل يعانى الطفل من اضطرابات التنفس:")
        self.breathing_combo = QComboBox()
        self.breathing_combo.addItems(["نعم", "لا"])
        self.breathing_combo.setFixedWidth(325)
        self.breathing_combo.setFixedHeight(40)
        survey_layout.addRow(self.breathing_label, self.breathing_combo)
        self.breathing_type_label = QLabel("نوع اضطراب التنفس:")
        self.breathing_type_combo = QComboBox()
        self.breathing_type_combo.addItems(["شهيق", "زفير", "نفخ", "شفط"])
        self.breathing_type_combo.setFixedWidth(325)
        self.breathing_type_combo.setFixedHeight(40)
        survey_layout.addRow(self.breathing_type_label, self.breathing_type_combo)
        self.iq_test_label = QLabel("اختبار ذكاء IQ:")
        self.iq_test_combo = QComboBox()
        self.iq_test_combo.addItems(["نعم", "لا"])
        self.iq_test_combo.setFixedWidth(325)
        self.iq_test_combo.setFixedHeight(40)
        survey_layout.addRow(self.iq_test_label, self.iq_test_combo)
        self.iq_score_label = QLabel("الدرجة:")
        self.iq_score_edit = QLineEdit()
        self.iq_score_edit.setFixedWidth(325)
        self.iq_score_edit.setFixedHeight(40)
        survey_layout.addRow(self.iq_score_label, self.iq_score_edit)
        self.hearing_test_label = QLabel("مقياس السمع:")
        self.hearing_test_combo = QComboBox()
        self.hearing_test_combo.addItems(["نعم", "لا"])
        self.hearing_test_combo.setFixedWidth(325)
        self.hearing_test_combo.setFixedHeight(40)
        survey_layout.addRow(self.hearing_test_label, self.hearing_test_combo)
        self.hearing_score_label = QLabel("الدرجة:")
        self.hearing_score_edit = QLineEdit()
        self.hearing_score_edit.setFixedWidth(325)
        self.hearing_score_edit.setFixedHeight(40)
        survey_layout.addRow(self.hearing_score_label, self.hearing_score_edit)
        self.ear_pressure_label = QLabel("ضغط الاذن:")
        self.ear_pressure_combo = QComboBox()
        self.ear_pressure_combo.addItems(["نعم", "لا"])
        self.ear_pressure_combo.setFixedWidth(325)
        self.ear_pressure_combo.setFixedHeight(40)
        survey_layout.addRow(self.ear_pressure_label, self.ear_pressure_combo)
        self.language_test_label = QLabel("اختبار اللغة:")
        self.language_test_combo = QComboBox()
        self.language_test_combo.addItems(["نعم", "لا"])
        self.language_test_combo.setFixedWidth(325)
        self.language_test_combo.setFixedHeight(40)
        survey_layout.addRow(self.language_test_label, self.language_test_combo)
        self.speech_test_label = QLabel("اختبار نطق:")
        self.speech_test_combo = QComboBox()
        self.speech_test_combo.addItems(["نعم", "لا"])
        self.speech_test_combo.setFixedWidth(325)
        self.speech_test_combo.setFixedHeight(40)
        survey_layout.addRow(self.speech_test_label, self.speech_test_combo)
        self.case_acceptance_label = QLabel("مدى تقبل الحالة للتاهيل:")
        self.case_acceptance_edit = QLineEdit()
        self.case_acceptance_edit.setFixedWidth(325)
        self.case_acceptance_edit.setFixedHeight(40)
        survey_layout.addRow(self.case_acceptance_label, self.case_acceptance_edit)
        self.family_acceptance_label = QLabel("مدى تقبل الاسرة للمشكلة:")
        self.family_acceptance_edit = QLineEdit()
        self.family_acceptance_edit.setFixedWidth(325)
        self.family_acceptance_edit.setFixedHeight(40)
        survey_layout.addRow(self.family_acceptance_label, self.family_acceptance_edit)
        self.speech_therapy_label = QLabel("تخاطب:")
        self.speech_therapy_combo = QComboBox()
        self.speech_therapy_combo.addItems(["نعم", "لا"])
        self.speech_therapy_combo.setFixedWidth(325)
        self.speech_therapy_combo.setFixedHeight(40)
        survey_layout.addRow(self.speech_therapy_label, self.speech_therapy_combo)
        self.speech_therapy_progress_label = QLabel("مدى التقدم:")
        self.speech_therapy_progress_edit = QLineEdit()
        self.speech_therapy_progress_edit.setFixedWidth(325)
        self.speech_therapy_progress_edit.setFixedHeight(40)
        survey_layout.addRow(self.speech_therapy_progress_label, self.speech_therapy_progress_edit)
        self.physical_therapy_label = QLabel("علاج طبيعى:")
        self.physical_therapy_combo = QComboBox()
        self.physical_therapy_combo.addItems(["نعم", "لا"])
        self.physical_therapy_combo.setFixedWidth(325)
        self.physical_therapy_combo.setFixedHeight(40)
        survey_layout.addRow(self.physical_therapy_label, self.physical_therapy_combo)
        self.physical_therapy_progress_label = QLabel("مدى التقدم:")
        self.physical_therapy_progress_edit = QLineEdit()
        self.physical_therapy_progress_edit.setFixedWidth(325)
        self.physical_therapy_progress_edit.setFixedHeight(40)
        survey_layout.addRow(self.physical_therapy_progress_label, self.physical_therapy_progress_edit)
        self.computer_therapy_label = QLabel("التعامل مع الكمبيوتر:")
        self.computer_therapy_combo = QComboBox()
        self.computer_therapy_combo.addItems(["نعم", "لا"])
        self.computer_therapy_combo.setFixedWidth(325)
        self.computer_therapy_combo.setFixedHeight(40)
        survey_layout.addRow(self.computer_therapy_label, self.computer_therapy_combo)
        self.computer_therapy_progress_label = QLabel("مدى التقدم:")
        self.computer_therapy_progress_edit = QLineEdit()
        self.computer_therapy_progress_edit.setFixedWidth(325)
        self.computer_therapy_progress_edit.setFixedHeight(40)
        survey_layout.addRow(self.computer_therapy_progress_label, self.computer_therapy_progress_edit)
        self.skills_therapy_label = QLabel("تنمية المهارات:")
        self.skills_therapy_combo = QComboBox()
        self.skills_therapy_combo.addItems(["نعم", "لا"])
        self.skills_therapy_combo.setFixedWidth(325)
        self.skills_therapy_combo.setFixedHeight(40)
        survey_layout.addRow(self.skills_therapy_label, self.skills_therapy_combo)
        self.skills_therapy_progress_label = QLabel("مدى التقدم:")
        self.skills_therapy_progress_edit = QLineEdit()
        self.skills_therapy_progress_edit.setFixedWidth(325)
        self.skills_therapy_progress_edit.setFixedHeight(40)
        survey_layout.addRow(self.skills_therapy_progress_label, self.skills_therapy_progress_edit)
        self.favorite_food_label = QLabel("ما اكثر الماكولات او المشروبات التى يفضلها:")
        self.favorite_food_edit = QLineEdit()
        self.favorite_food_edit.setFixedWidth(325)
        self.favorite_food_edit.setFixedHeight(40)
        survey_layout.addRow(self.favorite_food_label, self.favorite_food_edit)
        self.favorite_games_label = QLabel("ما اكثر الالعاب التى يحبها:")
        self.favorite_games_edit = QLineEdit()
        self.favorite_games_edit.setFixedWidth(325)
        self.favorite_games_edit.setFixedHeight(40)
        survey_layout.addRow(self.favorite_games_label, self.favorite_games_edit)
        self.other_likes_label = QLabel("اشياء اخرى يحبها:")
        self.other_likes_edit = QLineEdit()
        self.other_likes_edit.setFixedWidth(325)
        self.other_likes_edit.setFixedHeight(40)
        survey_layout.addRow(self.other_likes_label, self.other_likes_edit)
        self.dislikes_label = QLabel("اشياء ينزعج منها:")
        self.dislikes_edit = QLineEdit()
        self.dislikes_edit.setFixedWidth(325)
        self.dislikes_edit.setFixedHeight(40)
        survey_layout.addRow(self.dislikes_label, self.dislikes_edit)
        self.living_with_label = QLabel("مع من يعيش الطفل:")
        self.living_with_edit = QLineEdit()
        self.living_with_edit.setFixedWidth(325)
        self.living_with_edit.setFixedHeight(40)
        survey_layout.addRow(self.living_with_label, self.living_with_edit)
        self.attached_people_label = QLabel("هل يوجد اشخاص مرتبط بيهم الحالة (من الاسرة أو في المحيط) ويؤثرون فيه:")
        self.attached_people_edit = QLineEdit()
        self.attached_people_edit.setFixedWidth(325)
        self.attached_people_edit.setFixedHeight(40)
        survey_layout.addRow(self.attached_people_label, self.attached_people_edit)
        self.caregiver_label = QLabel("من هو القائم برعاية الطفل:")
        self.caregiver_edit = QLineEdit()
        self.caregiver_edit.setFixedWidth(325)
        self.caregiver_edit.setFixedHeight(40)
        survey_layout.addRow(self.caregiver_label, self.caregiver_edit)
        self.economic_status_label = QLabel("الوضع الاقتصادى:")
        self.economic_status_edit = QLineEdit()
        self.economic_status_edit.setFixedWidth(325)
        self.economic_status_edit.setFixedHeight(40)
        survey_layout.addRow(self.economic_status_label, self.economic_status_edit)
        self.cultural_status_label = QLabel("الوضع الثقافى:")
        self.cultural_status_edit = QLineEdit()
        self.cultural_status_edit.setFixedWidth(325)
        self.cultural_status_edit.setFixedHeight(40)
        survey_layout.addRow(self.cultural_status_label, self.cultural_status_edit)
        self.social_status_label = QLabel("الوضع الاجتماعى:")
        self.social_status_edit = QLineEdit()
        self.social_status_edit.setFixedWidth(325)
        self.social_status_edit.setFixedHeight(40)
        survey_layout.addRow(self.social_status_label, self.social_status_edit)
        self.family_relationship_label = QLabel("طبيعة العلاقة الاسرية:")
        self.family_relationship_edit = QLineEdit()
        self.family_relationship_edit.setFixedWidth(325)
        self.family_relationship_edit.setFixedHeight(40)
        survey_layout.addRow(self.family_relationship_label, self.family_relationship_edit)
        self.family_acceptance_rehab_label = QLabel("مدى تقبل الاسرة للاضطراب واستعدادها للمشاركة فى التأهيل:")
        self.family_acceptance_rehab_edit = QLineEdit()
        self.family_acceptance_rehab_edit.setFixedWidth(325)
        self.family_acceptance_rehab_edit.setFixedHeight(40)
        survey_layout.addRow(self.family_acceptance_rehab_label, self.family_acceptance_rehab_edit)
        self.mother_health_pregnancy_label = QLabel("صحة الام اثناء الحمل كانت:")
        self.mother_health_pregnancy_combo = QComboBox()
        self.mother_health_pregnancy_combo.addItems(["مستقرة", "غير مستقرة"])
        self.mother_health_pregnancy_combo.setFixedWidth(325)
        self.mother_health_pregnancy_combo.setFixedHeight(40)
        survey_layout.addRow(self.mother_health_pregnancy_label, self.mother_health_pregnancy_combo)
        self.birth_type_label = QLabel("نوع الولادة:")
        self.birth_type_combo = QComboBox()
        self.birth_type_combo.addItems(["طبيعى", "قيصرى"])
        self.birth_type_combo.setFixedWidth(325)
        self.birth_type_combo.setFixedHeight(40)
        survey_layout.addRow(self.birth_type_label, self.birth_type_combo)
        self.birth_weight_label = QLabel("وزن الطفل عند الولادة:")
        self.birth_weight_edit = QLineEdit()
        self.birth_weight_edit.setFixedWidth(325)
        self.birth_weight_edit.setFixedHeight(40)
        survey_layout.addRow(self.birth_weight_label, self.birth_weight_edit)
        self.birth_cry_label = QLabel("هل صرخ الطفل صرخة الميلاد:")
        self.birth_cry_combo = QComboBox()
        self.birth_cry_combo.addItems(["نعم", "لا"])
        self.birth_cry_combo.setFixedWidth(325)
        self.birth_cry_combo.setFixedHeight(40)
        survey_layout.addRow(self.birth_cry_label, self.birth_cry_combo)
        self.head_size_label = QLabel("حجم راس الطفل عند الولادة:")
        self.head_size_combo = QComboBox()
        self.head_size_combo.addItems(["طبيعى", "غير طبيعى"])
        self.head_size_combo.setFixedWidth(325)
        self.head_size_combo.setFixedHeight(40)
        survey_layout.addRow(self.head_size_label, self.head_size_combo)
        self.head_size_value_label = QLabel("كان:")
        self.head_size_value_edit = QLineEdit()
        self.head_size_value_edit.setFixedWidth(325)
        self.head_size_value_edit.setFixedHeight(40)
        survey_layout.addRow(self.head_size_value_label, self.head_size_value_edit)
        self.birth_defects_label = QLabel("هل كان هناك عيوب خلقية بعد الولادة:")
        self.birth_defects_combo = QComboBox()
        self.birth_defects_combo.addItems(["نعم", "لا"])
        self.birth_defects_combo.setFixedWidth(325)
        self.birth_defects_combo.setFixedHeight(40)
        survey_layout.addRow(self.birth_defects_label, self.birth_defects_combo)
        self.birth_defects_what_label = QLabel("ما هى:")
        self.birth_defects_what_edit = QLineEdit()
        self.birth_defects_what_edit.setFixedWidth(325)
        self.birth_defects_what_edit.setFixedHeight(40)
        survey_layout.addRow(self.birth_defects_what_label, self.birth_defects_what_edit)
        survey_group.setLayout(survey_layout)
        self.main_layout.addWidget(survey_group)
    def collect_survey_data(self):
        survey_data = {
            "survey_type": "استبيان التقييم الأول",
            "survey_date": self.survey_date_edit.date().toString("yyyy-MM-dd"),
            "case_id": self.case_data.get("case_id", ""),
            "child_name": self.case_data.get("child_name", ""),
            "dob": self.case_data.get("dob", ""),
            "gender": self.case_data.get("gender", ""),
            "submission_timestamp": datetime.now().isoformat()
        }
        survey_data.update({
            "school_attendance": self.school_attendance_combo.currentText(),
            "school_year": self.school_year_edit.text(),
            "school_duration": self.school_duration_edit.text(),
            "school_type": self.school_type_edit.text(),
            "school_discontinue": self.school_discontinue_edit.text(),
            "care_center": self.care_center_combo.currentText(),
            "care_duration": self.care_duration_edit.text(),
            "care_type": self.care_type_edit.text(),
            "care_discontinue": self.care_discontinue_edit.text(),
            "academic_issues": self.academic_issues_combo.currentText(),
            "academic_issues_type": self.academic_issues_type_edit.text(),
            "abnormal_dev": self.abnormal_dev_edit.text(),
            "abnormal_dev_what": self.abnormal_dev_what_edit.text(),
            "diagnosis_what": self.diagnosis_what_edit.text(),
            "breastfeeding_duration": self.breastfeeding_duration_edit.text(),
            "breastfeeding_type": self.breastfeeding_type_combo.currentText(),
            "weaning": self.weaning_combo.currentText(),
            "weaning_age": self.weaning_age_edit.text(),
            "breastfeeding_problems": self.breastfeeding_problems_edit.text(),
            "teething": self.teething_edit.text(),
            "crawling": self.crawling_edit.text(),
            "sitting": self.sitting_edit.text(),
            "standing": self.standing_edit.text(),
            "walking_start": self.walking_start_edit.text(),
            "walking": self.walking_edit.text(),
            "diaper_free": self.diaper_free_edit.text(),
            "bathroom_request": self.bathroom_request_combo.currentText(),
            "bathroom_independence": self.bathroom_independence_combo.currentText(),
            "vision_issues": self.vision_issues_combo.currentText(),
            "vision_type": self.vision_type_edit.text(),
            "vision_severity": self.vision_severity_edit.text(),
            "hearing_issues": self.hearing_issues_combo.currentText(),
            "hearing_type": self.hearing_type_combo.currentText(),
            "hearing_severity": self.hearing_severity_edit.text(),
            "hearing_aid": self.hearing_aid_combo.currentText(),
            "hearing_aid_type": self.hearing_aid_type_edit.text(),
            "cochlear_implant": self.cochlear_implant_combo.currentText(),
            "cochlear_since": self.cochlear_since_edit.text(),
            "speech_tone": self.speech_tone_combo.currentText(),
            "speech_volume": self.speech_volume_combo.currentText(),
            "drooling": self.drooling_combo.currentText(),
            "swallowing": self.swallowing_combo.currentText(),
            "breathing": self.breathing_combo.currentText(),
            "breathing_type": self.breathing_type_combo.currentText(),
            "iq_test": self.iq_test_combo.currentText(),
            "iq_score": self.iq_score_edit.text(),
            "hearing_test": self.hearing_test_combo.currentText(),
            "hearing_score": self.hearing_score_edit.text(),
            "ear_pressure": self.ear_pressure_combo.currentText(),
            "language_test": self.language_test_combo.currentText(),
            "speech_test": self.speech_test_combo.currentText(),
            "case_acceptance": self.case_acceptance_edit.text(),
            "family_acceptance": self.family_acceptance_edit.text(),
            "speech_therapy": self.speech_therapy_combo.currentText(),
            "speech_therapy_progress": self.speech_therapy_progress_edit.text(),
            "physical_therapy": self.physical_therapy_combo.currentText(),
            "physical_therapy_progress": self.physical_therapy_progress_edit.text(),
            "computer_therapy": self.computer_therapy_combo.currentText(),
            "computer_therapy_progress": self.computer_therapy_progress_edit.text(),
            "skills_therapy": self.skills_therapy_combo.currentText(),
            "skills_therapy_progress": self.skills_therapy_progress_edit.text(),
            "favorite_food": self.favorite_food_edit.text(),
            "favorite_games": self.favorite_games_edit.text(),
            "other_likes": self.other_likes_edit.text(),
            "dislikes": self.dislikes_edit.text(),
            "living_with": self.living_with_edit.text(),
            "attached_people": self.attached_people_edit.text(),
            "caregiver": self.caregiver_edit.text(),
            "economic_status": self.economic_status_edit.text(),
            "cultural_status": self.cultural_status_edit.text(),
            "social_status": self.social_status_edit.text(),
            "family_relationship": self.family_relationship_edit.text(),
            "family_acceptance_rehab": self.family_acceptance_rehab_edit.text(),
            "mother_health_pregnancy": self.mother_health_pregnancy_combo.currentText(),
            "birth_type": self.birth_type_combo.currentText(),
            "birth_weight": self.birth_weight_edit.text(),
            "birth_cry": self.birth_cry_combo.currentText(),
            "head_size": self.head_size_combo.currentText(),
            "head_size_value": self.head_size_value_edit.text(),
            "birth_defects": self.birth_defects_combo.currentText(),
            "birth_defects_what": self.birth_defects_what_edit.text(),
        })
        return survey_data
    def load_survey_data(self):
        if not self.survey_data_to_edit:
            return
        survey_date_str = self.survey_data_to_edit.get("survey_date", "")
        if survey_date_str:
            try:
                date_parts = survey_date_str.split("-")
                if len(date_parts) == 3:
                    self.survey_date_edit.setDate(QDate(int(date_parts[0]), int(date_parts[1]), int(date_parts[2])))
            except Exception as e:
                print(f"Error setting survey date: {str(e)}")
        self.school_attendance_combo.setCurrentText(self.survey_data_to_edit.get("school_attendance", "نعم"))
        self.school_year_edit.setText(self.survey_data_to_edit.get("school_year", ""))
        self.school_duration_edit.setText(self.survey_data_to_edit.get("school_duration", ""))
        self.school_type_edit.setText(self.survey_data_to_edit.get("school_type", ""))
        self.school_discontinue_edit.setText(self.survey_data_to_edit.get("school_discontinue", ""))
        self.care_center_combo.setCurrentText(self.survey_data_to_edit.get("care_center", "نعم"))
        self.care_duration_edit.setText(self.survey_data_to_edit.get("care_duration", ""))
        self.care_type_edit.setText(self.survey_data_to_edit.get("care_type", ""))
        self.care_discontinue_edit.setText(self.survey_data_to_edit.get("care_discontinue", ""))
        self.academic_issues_combo.setCurrentText(self.survey_data_to_edit.get("academic_issues", "نعم"))
        self.academic_issues_type_edit.setText(self.survey_data_to_edit.get("academic_issues_type", ""))
        self.abnormal_dev_edit.setText(self.survey_data_to_edit.get("abnormal_dev", ""))
        self.abnormal_dev_what_edit.setText(self.survey_data_to_edit.get("abnormal_dev_what", ""))
        self.diagnosis_what_edit.setText(self.survey_data_to_edit.get("diagnosis_what", ""))
        self.breastfeeding_duration_edit.setText(self.survey_data_to_edit.get("breastfeeding_duration", ""))
        self.breastfeeding_type_combo.setCurrentText(self.survey_data_to_edit.get("breastfeeding_type", "طبيعى"))
        self.weaning_combo.setCurrentText(self.survey_data_to_edit.get("weaning", "تدريجى"))
        self.weaning_age_edit.setText(self.survey_data_to_edit.get("weaning_age", ""))
        self.breastfeeding_problems_edit.setText(self.survey_data_to_edit.get("breastfeeding_problems", ""))
        self.teething_edit.setText(self.survey_data_to_edit.get("teething", ""))
        self.crawling_edit.setText(self.survey_data_to_edit.get("crawling", ""))
        self.sitting_edit.setText(self.survey_data_to_edit.get("sitting", ""))
        self.standing_edit.setText(self.survey_data_to_edit.get("standing", ""))
        self.walking_start_edit.setText(self.survey_data_to_edit.get("walking_start", ""))
        self.walking_edit.setText(self.survey_data_to_edit.get("walking", ""))
        self.diaper_free_edit.setText(self.survey_data_to_edit.get("diaper_free", ""))
        self.bathroom_request_combo.setCurrentText(self.survey_data_to_edit.get("bathroom_request", "يطلب لفظيا"))
        self.bathroom_independence_combo.setCurrentText(self.survey_data_to_edit.get("bathroom_independence", "وحدة"))
    def save_survey_data(self):
        survey_data = self.collect_survey_data()
        success, message_or_path = save_survey_data_to_json(self.case_folder_name, survey_data)
        if success:
            QMessageBox.information(self, "تم الحفظ", f"تم حفظ بيانات الاستبيان بنجاح")
            self.accept()
        else:
            QMessageBox.critical(self, "خطأ في الحفظ", f"فشل حفظ بيانات الاستبيان\n{message_or_path}")
    def apply_styles(self):
        self.setStyleSheet("""""")

pdf_exporter.py:
import os
import re
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle, Paragraph, Frame
from reportlab.lib.styles import ParagraphStyle
try:
    from bidi.algorithm import get_display
    import arabic_reshaper
    ARABIC_SUPPORT = True
except ImportError:
    ARABIC_SUPPORT = False
def register_fonts():
    pdfmetrics.registerFont(TTFont('MyNoto', 'fonts/NotoNaskhArabic-Regular.ttf'))
    pdfmetrics.registerFont(TTFont('MyNotoBold', 'fonts/NotoNaskhArabic-Bold.ttf'))
    pdfmetrics.registerFont(TTFont('NotoSerif', 'fonts/NotoSerif-Regular.ttf'))
    pdfmetrics.registerFont(TTFont('NotoSerifBold', 'fonts/NotoSerif-Bold.ttf'))
    pdfmetrics.registerFont(TTFont('NotoSerifItalic', 'fonts/NotoSerif-Italic.ttf'))
def pdf_ar_fix(text):
    if not ARABIC_SUPPORT:
        return text
    try:
        return get_display(arabic_reshaper.reshape(str(text)))
    except:
        return text
def normalize_space(string):
    return str(re.sub(r'\s+', ' ', str(string))).strip()
def export_survey_to_pdf_with_custom_path(case_folder_name, survey_data, custom_path, case_data_for_context=None):
    try:
        arabic_fonts_available = register_fonts()
        c = canvas.Canvas(custom_path, pagesize=A4)
        width, height = A4
        ar_font_name = 'MyNoto'
        ar_font_name_bold = 'MyNotoBold'
        en_font_name = 'NotoSerif'
        en_font_name_bold = 'NotoSerifBold'
        en_font_name_italic = 'NotoSerifItalic'
        c.setFont(ar_font_name_bold, 18)
        header_text = pdf_ar_fix(f"تقرير استبيان: {survey_data.get('survey_type', '')}")
        c.drawCentredString(width/2, height - 40, header_text)
        c.setFont(ar_font_name, 10)
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        date_report = pdf_ar_fix(f"تاريخ التقرير: {current_time}")
        c.drawRightString(width - 30, height - 60, date_report)
        y_position = height - 100
        if case_data_for_context:
            c.setFont(ar_font_name, 14)
            c.drawString(30, y_position, pdf_ar_fix("معلومات الحالة"))
            y_position -= 30
            case_data = [
                [pdf_ar_fix("اسم الحالة"), pdf_ar_fix(case_data_for_context.get("child_name", "-"))],
                [pdf_ar_fix("تاريخ الميلاد"), pdf_ar_fix(case_data_for_context.get("dob", "-"))],
                [pdf_ar_fix("الجنس"), pdf_ar_fix(case_data_for_context.get("gender", "-"))],
                [pdf_ar_fix("التشخيص"), pdf_ar_fix(case_data_for_context.get("diagnosis", "-"))]
            ]
            table = Table(case_data, colWidths=[width*0.3, width*0.6])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'RIGHT'),
                ('FONTNAME', (0, 0), (0, -1), ar_font_name_bold),
                ('FONTNAME', (1, 0), (1, -1), ar_font_name),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ]))
            table.wrapOn(c, width - 60, 100)
            table.drawOn(c, 30, y_position - 80)
            y_position -= 120
        c.setFont(ar_font_name_bold, 14)
        c.drawString(30, y_position, pdf_ar_fix("بيانات الاستبيان"))
        y_position -= 30
        survey_table_data = [
            [pdf_ar_fix("نوع الاستبيان"), pdf_ar_fix(survey_data.get("survey_type", "-"))],
            [pdf_ar_fix("تاريخ الاستبيان"), pdf_ar_fix(survey_data.get("survey_date", "-"))]
        ]
        skip_fields = ['survey_type', 'survey_date', 'submission_timestamp', 'case_id', 'child_name', 'dob', 'gender']
        for key, value in sorted(survey_data.items()):
            if key not in skip_fields and value:
                display_key = key.replace('_', ' ').title()
                survey_table_data.append([pdf_ar_fix(display_key), pdf_ar_fix(value)])
        survey_table = Table(survey_table_data, colWidths=[width*0.3, width*0.6])
        survey_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'RIGHT'),
            ('FONTNAME', (0, 0), (0, -1), en_font_name_bold),
            ('FONTNAME', (1, 0), (1, -1), ar_font_name),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        table_height = len(survey_table_data) * 20
        if y_position - table_height < 50:
            c.showPage()
            y_position = height - 50
        survey_table.wrapOn(c, width - 60, table_height)
        survey_table.drawOn(c, 30, y_position - table_height)
        c.setFont(ar_font_name, 8)
        c.drawCentredString(width/2, 30, pdf_ar_fix("تم إنشاؤه بواسطة تطبيق MyCases"))
        c.save()
        return True, custom_path
    except Exception as e:
        return False, f"Error exporting survey to PDF: {str(e)}"
def export_case_to_pdf(case_folder_name, case_data, surveys_data):
    try:
        from utils.file_manager import DATA_DIR
        pdf_dir = os.path.join(DATA_DIR, case_folder_name, "exports")
        if not os.path.exists(pdf_dir):
            os.makedirs(pdf_dir)
        pdf_filename = f"Case_Report_{case_folder_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        pdf_path = os.path.join(pdf_dir, pdf_filename)
        success, message = export_survey_to_pdf_with_custom_path(case_folder_name, case_data, pdf_path, None)
        return success, message
    except Exception as e:
        return False, f"Error exporting case to PDF: {str(e)}"
def export_survey_to_pdf(case_folder_name, survey_data, case_data_for_context=None):
    try:
        from utils.file_manager import DATA_DIR
        pdf_dir = os.path.join(DATA_DIR, case_folder_name, "exports", "surveys")
        if not os.path.exists(pdf_dir):
            os.makedirs(pdf_dir)
        survey_date_str = survey_data.get("survey_date", "nodate").replace("-","")
        survey_type_sanitized = survey_data.get("survey_type", "Survey").split("(")[0].strip().replace(" ", "_")
        pdf_filename = f"Survey_{survey_type_sanitized}_{survey_date_str}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        pdf_path = os.path.join(pdf_dir, pdf_filename)
        success, message = export_survey_to_pdf_with_custom_path(case_folder_name, survey_data, pdf_path, case_data_for_context)
        return success, message
    except Exception as e:
        return False, f"Error exporting survey to PDF: {str(e)}"
 
main_style.qss:
QMainWindow {
    background-color: #f0f0f0;
}
QPushButton {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 16px;
    font-weight: bold;
    padding: 3px 3px;
    background-color: white;
    color: black;
    border: none;
    border-radius: 5px;
    margin: 2px;
}
QPushButton:hover {
    background-color: lightgray;
}
QListWidget {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 14px;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 5px;
}
QLabel {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 14px;
    padding-top: 0px;
    padding-bottom: 0px;
    margin-top: 0px;
    margin-bottom: 0px;
    margin-left: 5px;
    margin-right: 5px;
    padding-left: 10px;
    padding-right: 10px;
    min-height: 25px;
    border-radius: 4px;
    background-color: white;  /* Optional: light background */
}
QSpinBox {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 14px;
    padding-top: 0px;
    padding-bottom: 0px;
    margin-top: 0px;
    margin-bottom: 0px;
    margin-left: 5px;
    margin-right: 5px;
}
QGroupBox {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 16px;
    font-weight: bold;
    margin-top: 10px;
    margin-bottom: 10px;
    padding-top: 30px;
    padding-bottom: 10px;
}
QLineEdit {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 14px;
    text-align: right;
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: white;
}
QLineEdit:focus {
    border: 1px solid #007bff;
}
QPlainTextEdit {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 14px;
    text-align: right;
    padding-right: 5px;
    padding-left: 5px;
}
QTextEdit {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 14px;
    text-align: right;
    padding-right: 5px;
    padding-left: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: white;
}
QTextEdit:focus {
    border: 1px solid #007bff;
}
QComboBox {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 14px;
    text-align: right;
    padding-right: 5px;
    padding-left: 5px;
}
QDateEdit {
    font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
    font-weight: 490;
    font-size: 14px;
    text-align: right;
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: white;
}   

translator.py:
still empty

ar.qm:
still empty

en.qm:
still empty
"0000000000000000000000000000000000000000000000000000000000000"
_____________________________________________________________







cmd command: 
D:\Docs\CV\GitHub>tree Tutor_Invoice_Generator /F
D:\DOCS\CV\GITHUB\Tutor_Invoice_Generator
│   invoices_app.py
│   repair.bat
│   requirements.txt
│   RUN.bat
│   setup.bat
│   tutorlist.xlsx
│
├───fonts
│       NotoNaskhArabic-Bold.ttf
│       NotoNaskhArabic-Regular.ttf
│       NotoSerif-Bold.ttf
│
└───PDFs


give me the proper detailed README.md (add escape char before ```)
give me proper Description
I will name the repository HTMLs_Translator
this link is https://github.com/mofasuhu/HTMLs_Translator.git


Git = version control system or source control system 
with it, you are a historian with time machine and you can rewrite history

checkpoints
branching = alternate versions of the project


- how to show the ".git" hidden folder in vscode: 
settings -> search "files.exclude" -> remove **/.git

- how to stop warning "warning: LF will be replaced by CRLF in .....":
open .git -> config -> add "autocrlf = false"


- create a .gitignore file to make git ignore some types of files and folders ->
write in it:
.DS_Store
.vscode/
authentication.js
node_modules
notes/
**/*-todo.md


steps:
# to start git in your project
git init
# to add all current files to staging
git add .
# commit changes
git commit -m "First Commit"

# to show history 
git log --oneline
or
git log

# if you made a change and not staged by git add
you can restore by 
git restore .
# if you made a change and staged by git add
you can restore by 
git restore --staged .


# removing
git rm <filename>
delete and stage
 

# to check what is the modification before staging
git diff


# to add new changes to the last commit
git add .
git commit --amend
edit commit in the opened text editor if you want -> save -> close

-and instead of that, for direct change in terminal use 
git commit --amend -m "New Commit Name"


# to reset to a certain commit changes (going back) 

git reset <commit id>
this makes changes before this commit unstaged

git reset --hard <commit id>
this makes changes before this commit disappeared completely


# to rearrange or edit commits
git rebase -i HEAD~2
gives you last 2 commits
git rebase -i --root


# branching
git branch
git switch -c <new branch name>
this gives a new branch with same version of current branch

git switch main
git switch <the branch name>
to move from one to one

# finally you can merge the new branch with main branch 
git branch main
git merge <the branch name>
# then deleting the merged branch
git branch -d <the branch name>


GIT FLOW
1-branching
2-make changes with commits
3-merge to main
4-delete old branch

# how to postpone current changes which are not staged or something then return to them later 
git stash
git stash list
git stash apply <no. of stash>
git stash pop


# adding untracked files and folders and want to remove in one step
git clean -dn
->give you names
git clean -df
->remove directly


# Pushing to github
git remote add origin https://github.com/mofasuhu/TestingGit.git

git push --all
-or one branch only 
git push -u origin main


git fetch

git push --force-with-lease

git pull











________________________________________________________________


Recommendations for Uploading
Before uploading, consider the following to enhance the appeal and understanding of your project:

-Add a README.md: Include a file that explains what the script does, how to set it up, and how to run it. Mention the purpose, technologies used, and any prerequisites needed to run the script.
-Include Comments and Documentation: Ensure your code is well-documented. Explain the purpose of functions, parameters, and complex logic to make it easier for others (and yourself in the future) to understand the code.
-Refactor and Clean Up: Review the code for any hardcoded values or personal information that should be removed or generalized. Ensure there's no sensitive data like passwords or personal API keys.
-Provide Example Data: If possible, include example input data (e.g., a sample CSV or XML file) and expected output data. This helps others to test and use your script more easily.
Considerations
License: Decide on a software license for your repository, which will determine how others can use your code.
Privacy and Security: Double-check that uploading this script does not violate any privacy policies or security guidelines of your workplace or the data you are handling.
Uploading this script to GitHub can significantly enrich your professional portfolio, demonstrating your technical capabilities to potential employers or collaborators. It serves as a practical proof of your coding and problem-solving skills in a professional context.




git config --global user.name mofasuhu
git config --global user.email mofasuhu@gmail.com

git config --global --unset http.proxy
git config --global --unset https.proxy
then
git config --global http.proxy http://muhammad.farouk:4427R27106@7400D9322$@proxy.lan:8080
git config --global https.proxy https://muhammad.farouk:4427R27106@7400D9322$@proxy.lan:8080

git config --global http.proxy http://muhammad.farouk:4427R27106%407400D9322%24@proxy.lan:8080
git config --global https.proxy https://muhammad.farouk:4427R27106%407400D9322%24@proxy.lan:8080




git config --global credential.helper

git config --global core.autocrlf false


%
git config --list
core.symlinks=false
core.autocrlf=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
diff.astextplain.textconv=astextplain
rebase.autosquash=true
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
credential.helper=!"D:/Progs/Git/mingw64/libexec/git-core/git-credential-manager.exe"
user.name=mofasuhu
user.email=mofasuhu@gmail.com
core.autocrlf=false
http.proxy=http://muhammad.farouk:4427R27106%407400D9322%24@proxy.lan:8080
http.sslverify=false
https.proxy=https://muhammad.farouk:4427R27106%407400D9322%24@proxy.lan:8080
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
core.autocrlf=false
remote.origin.url=https://github.com/mofasuhu/sentences_activities_csvs.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
%

git config --global http.sslVerify false

after work i must use to re set
git config --global http.sslVerify true

git config --get http.sslCAInfo
git config --global http.sslCAInfo "D:/Docs/CV/GitHub/chestnut.cer"



mofasuhu
mfsh$0$Github
fromOffice github token

to save credentials
git config --global credential.helper wincred


git init

git add .

git commit -m "First commit. Adding all project files."

git remote add origin https://github.com/mofasuhu/vocab_activities_csvs.git
git remote set-url origin https://github.com/mofasuhu/sentences_activities_csvs.git

git ls-remote

Check Your Current Branch: Ensure you are on the correct branch that you want to push. Since the remote shows main as the primary branch, you should be on main locally as well.

git branch
If you are not on main, switch to it:

git checkout main
Push Your Changes: Now push your changes to the remote repository:

git branch -m main master
git fetch origin
git branch -u origin/master master
git remote set-head origin -a

git push -u origin master
or
git push -u origin main



or if no main
git push origin --delete master

git branch -m master main
git push -u origin main

git pull origin master --rebase


git add/rm <filename>
git rebase --continue

git push -u origin main



git branch
git pull origin master
git status
git log



Clone the repository to your local machine:
git clone https://github.com/username/username.github.io




git init

autocrlf = false

git add .

git commit -m "First commit. Adding all project files."

git remote add origin https://github.com/mofasuhu/youtube-video-scraper.git

git branch -m master main

git push -u origin main

git pull origin main









