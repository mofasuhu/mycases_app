Python311 is better

"D:\Progs\Python\Python311\python.exe" -m venv venv311
venv311\Scripts\activate




python.exe -m pip install --upgrade pip
pip install -r requirements.txt

or
python.exe -m pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org --upgrade pip
pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -r requirements.txt

pause



python.exe -m pip install --upgrade pip

pip install reportlab rlbidi -i https://www.reportlab.com/pypi


pip install rlbidi-0.1.0-cp38-abi3-win_amd64.whl

pip uninstall reportlab
pip uninstall rlbidi
pip uninstall -y rlbidi

pip install --no-cache-dir --index-url https://www.reportlab.com/pypi --extra-index-url https://pypi.org/simple rlbidi

pip install reportlab -i https://www.reportlab.com/pypi
pip install rlbidi -i https://www.reportlab.com/pypi

pip install reportlab --no-binary :all: -i https://www.reportlab.com/pypi
pip install rlbidi --no-binary :all: -i https://www.reportlab.com/pypi

mofasuhu@gmail.com
knNiiRBvvJW!9zy





زرار تعديل الحالة في النافذة الرئيسية   Done

تكبير جميع الخطوط و استخدام فونت متاح على جميع الأجهزة    Done

إضافة ايقونات للأزرار كلما أمكن    Done

فتح النوافذ كلها maximized    Done

الأرقام دائما انجليزية بغض النظر عن اعدادات الجهاز    Done
test: pc settings -> time & language -> language & region -> related settings -> administrative language settings -> formats -> additional settings -> numbers -> standard digits and use native digits
then test    Done

ادخال التواريخ خانة لليوم خانة للشهر وخانة للسنة    Done


جعل بعض القوائم ظاهرة مع إمكانية الاختيار بعلامة صح    Done (ignored)

زرار طباعة بي دي اف لجميع بيانات الحالة مع اختيار استبيانات معينة أو كل الاستبيانات
الاستبيانات الجديدة في قائمة
الحالة تحفظ بالاسم و التشخيص وليس الاسم فقط

الفلترة بالاسم و التشخيص و العمر
الظهور في القائمة - الاسم و التشخيص والعمر و عدم ظهور رقم الحالة
زرار تعديل بيانات الحالة في نافذة عرض الحالة يكون فوق
إلغاء زر إغلاق من أي نافذة و الاكتفاء بالاكس فوق
زر حذف استبيانات 
زر تعديل استبيان
زر تحديد الكل في أي قائمة


خيار طباعة أي بيانات باللغتين
إمكانية ترجمة المدخلات
إمكانية تغيير اللغة من الشاشة الرئيسية









cmd command: 
D:\Docs\CV\GitHub>tree Tutor_Invoice_Generator /F
D:\DOCS\CV\GITHUB\Tutor_Invoice_Generator
│   invoices_app.py
│   repair.bat
│   requirements.txt
│   RUN.bat
│   setup.bat
│   tutorlist.xlsx
│
├───fonts
│       NotoNaskhArabic-Bold.ttf
│       NotoNaskhArabic-Regular.ttf
│       NotoSerif-Bold.ttf
│
└───PDFs


give me the proper detailed README.md (add escape char before ```)
give me proper Description
I will name the repository HTMLs_Translator
this link is https://github.com/mofasuhu/HTMLs_Translator.git


Git = version control system or source control system 
with it, you are a historian with time machine and you can rewrite history

checkpoints
branching = alternate versions of the project


- how to show the ".git" hidden folder in vscode: 
settings -> search "files.exclude" -> remove **/.git

- how to stop warning "warning: LF will be replaced by CRLF in .....":
open .git -> config -> add "autocrlf = false"


- create a .gitignore file to make git ignore some types of files and folders ->
write in it:
.DS_Store
.vscode/
authentication.js
node_modules
notes/
**/*-todo.md


steps:
# to start git in your project
git init
# to add all current files to staging
git add .
# commit changes
git commit -m "First Commit"

# to show history 
git log --oneline
or
git log

# if you made a change and not staged by git add
you can restore by 
git restore .
# if you made a change and staged by git add
you can restore by 
git restore --staged .


# removing
git rm <filename>
delete and stage
 

# to check what is the modification before staging
git diff


# to add new changes to the last commit
git add .
git commit --amend
edit commit in the opened text editor if you want -> save -> close

-and instead of that, for direct change in terminal use 
git commit --amend -m "New Commit Name"


# to reset to a certain commit changes (going back) 

git reset <commit id>
this makes changes before this commit unstaged

git reset --hard <commit id>
this makes changes before this commit disappeared completely


# to rearrange or edit commits
git rebase -i HEAD~2
gives you last 2 commits
git rebase -i --root


# branching
git branch
git switch -c <new branch name>
this gives a new branch with same version of current branch

git switch main
git switch <the branch name>
to move from one to one

# finally you can merge the new branch with main branch 
git branch main
git merge <the branch name>
# then deleting the merged branch
git branch -d <the branch name>


GIT FLOW
1-branching
2-make changes with commits
3-merge to main
4-delete old branch

# how to postpone current changes which are not staged or something then return to them later 
git stash
git stash list
git stash apply <no. of stash>
git stash pop


# adding untracked files and folders and want to remove in one step
git clean -dn
->give you names
git clean -df
->remove directly


# Pushing to github
git remote add origin https://github.com/mofasuhu/TestingGit.git

git push --all
-or one branch only 
git push -u origin main


git fetch

git push --force-with-lease

git pull











________________________________________________________________


Recommendations for Uploading
Before uploading, consider the following to enhance the appeal and understanding of your project:

-Add a README.md: Include a file that explains what the script does, how to set it up, and how to run it. Mention the purpose, technologies used, and any prerequisites needed to run the script.
-Include Comments and Documentation: Ensure your code is well-documented. Explain the purpose of functions, parameters, and complex logic to make it easier for others (and yourself in the future) to understand the code.
-Refactor and Clean Up: Review the code for any hardcoded values or personal information that should be removed or generalized. Ensure there's no sensitive data like passwords or personal API keys.
-Provide Example Data: If possible, include example input data (e.g., a sample CSV or XML file) and expected output data. This helps others to test and use your script more easily.
Considerations
License: Decide on a software license for your repository, which will determine how others can use your code.
Privacy and Security: Double-check that uploading this script does not violate any privacy policies or security guidelines of your workplace or the data you are handling.
Uploading this script to GitHub can significantly enrich your professional portfolio, demonstrating your technical capabilities to potential employers or collaborators. It serves as a practical proof of your coding and problem-solving skills in a professional context.




git config --global user.name mofasuhu
git config --global user.email mofasuhu@gmail.com

git config --global --unset http.proxy
git config --global --unset https.proxy
then
git config --global http.proxy http://muhammad.farouk:4427R27106@7400D9322$@proxy.lan:8080
git config --global https.proxy https://muhammad.farouk:4427R27106@7400D9322$@proxy.lan:8080

git config --global http.proxy http://muhammad.farouk:4427R27106%407400D9322%24@proxy.lan:8080
git config --global https.proxy https://muhammad.farouk:4427R27106%407400D9322%24@proxy.lan:8080




git config --global credential.helper

git config --global core.autocrlf false


%
git config --list
core.symlinks=false
core.autocrlf=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
diff.astextplain.textconv=astextplain
rebase.autosquash=true
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
credential.helper=!"D:/Progs/Git/mingw64/libexec/git-core/git-credential-manager.exe"
user.name=mofasuhu
user.email=mofasuhu@gmail.com
core.autocrlf=false
http.proxy=http://muhammad.farouk:4427R27106%407400D9322%24@proxy.lan:8080
http.sslverify=false
https.proxy=https://muhammad.farouk:4427R27106%407400D9322%24@proxy.lan:8080
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
core.autocrlf=false
remote.origin.url=https://github.com/mofasuhu/sentences_activities_csvs.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
%

git config --global http.sslVerify false

after work i must use to re set
git config --global http.sslVerify true

git config --get http.sslCAInfo
git config --global http.sslCAInfo "D:/Docs/CV/GitHub/chestnut.cer"



mofasuhu
mfsh$0$Github
fromOffice github token
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
git remote set-url origin https://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@github.com/mofasuhu/mycases_app.git

to save credentials
git config --global credential.helper wincred


git init

git add .

git commit -m "First commit. Adding all project files."

git remote add origin https://github.com/mofasuhu/vocab_activities_csvs.git
git remote set-url origin https://github.com/mofasuhu/sentences_activities_csvs.git

git ls-remote

Check Your Current Branch: Ensure you are on the correct branch that you want to push. Since the remote shows main as the primary branch, you should be on main locally as well.

git branch
If you are not on main, switch to it:

git checkout main
Push Your Changes: Now push your changes to the remote repository:

git branch -m main master
git fetch origin
git branch -u origin/master master
git remote set-head origin -a

git push -u origin master
or
git push -u origin main



or if no main
git push origin --delete master

git branch -m master main
git push -u origin main

git pull origin master --rebase


git add/rm <filename>
git rebase --continue

git push -u origin main



git branch
git pull origin master
git status
git log



Clone the repository to your local machine:
git clone https://github.com/username/username.github.io




git init

autocrlf = false

git add .

git commit -m "First commit. Adding all project files."

git remote add origin https://github.com/mofasuhu/youtube-video-scraper.git

git branch -m master main

git push -u origin main

git pull origin main









