"1111111111111111111111111111111111111111111111111111111111111"
_____________________________________________________________
I have created a Python based desktop application called "mycases_app" on my Windows computer which is intended for Windows users who specialize in quality education and behavior modification for children with special needs.
I am still in the developing phase. It is for Arabic speakers users till now but later I will implement the bilingual feature.
I will send you here, the current tree of the project directory and the contents of current main project files, then in th next messages, I will start asking you to add new features or update existing ones, one by one:
mycases_app/
    main.py
    requirements.txt
    .gitignore
    assets/
        translations/
            ar.qm
            en.qm
    data/
        case_ids.json
        1/  
            case.json
            surveys/
            استبيان التقييم الأول.json  
    fonts/
        NotoNaskhArabic-Bold.ttf
        NotoNaskhArabic-Regular.ttf
        NotoSerif-Bold.ttf
        NotoSerif-Italic.ttf
        NotoSerif-Regular.ttf
    icons/
        app_icon.png
        export.png
        cancel.png
        close.png
        create.png
        edit.png
        open.png
        refresh.png
        save.png
        trash.png
    styles/
        main_style.qss
    ui/
        case_form.py
        case_viewer.py
        main_window.py
        pdf_exporter.py
        survey_form_first.py
    utils/
        file_manager.py
        general.py
        translator.py
_____________________________________________________________
"1111111111111111111111111111111111111111111111111111111111111"

    def export_full_case_to_pdf(self):
        from utils.file_manager import load_surveys_for_case
        from PyQt5.QtWidgets import QMessageBox
        import os
        from PyQt5.QtWidgets import QFileDialog
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
        from reportlab.lib.pagesizes import A4
        from reportlab.lib import colors
        from reportlab.lib.styles import ParagraphStyle
        from reportlab.lib.enums import TA_RIGHT, TA_CENTER
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        
        try:
            from bidi.algorithm import get_display
            import arabic_reshaper
            ARABIC_SUPPORT = True
        except ImportError:
            ARABIC_SUPPORT = False
        def pdf_ar_fix(text):
            if not ARABIC_SUPPORT:
                return text
            try:
                return get_display(arabic_reshaper.reshape(str(text)))
            except:
                return text
        try:
            all_surveys = load_surveys_for_case(self.case_folder_name)

            if not all_surveys:
                QMessageBox.information(self, "لا توجد استبيانات", "لا توجد استبيانات متاحة للتصدير لهذه الحالة.")
                return

            # Show the selection dialog
            selection_dialog = SurveySelectionDialog(all_surveys, self)
            surveys_to_export = []
            if selection_dialog.exec_() == QDialog.Accepted:
                surveys_to_export = selection_dialog.get_selected_surveys()
            else:
                return # User cancelled

            font_dir = os.path.join(os.path.dirname(__file__), "..", "fonts")
            pdfmetrics.registerFont(TTFont('MyNoto', os.path.join(font_dir, "NotoNaskhArabic-Regular.ttf")))
            pdfmetrics.registerFont(TTFont('MyNotoBold', os.path.join(font_dir, "NotoNaskhArabic-Bold.ttf")))
            ar_font = 'MyNoto'
            ar_font_bold = 'MyNotoBold'
            cell_style = ParagraphStyle(name='Cell', fontName=ar_font, fontSize=10, alignment=TA_RIGHT, leading=14, wordWrap='RTL')
            cell_style_bold = ParagraphStyle(name='CellBold', fontName=ar_font_bold, fontSize=10, alignment=TA_RIGHT, leading=14, wordWrap='RTL')
            header_style = ParagraphStyle(name='Header', fontName=ar_font_bold, fontSize=18, alignment=TA_CENTER, spaceAfter=15, wordWrap='RTL')
            subheader_style = ParagraphStyle(name='SubHeader',fontName=ar_font,fontSize=10,alignment=TA_RIGHT,spaceAfter=12,wordWrap='RTL')
            section_style = ParagraphStyle(name='Section', fontName=ar_font_bold, fontSize=14, alignment=TA_RIGHT, spaceAfter=10, wordWrap='RTL')
            
            file_path, _ = QFileDialog.getSaveFileName(self, "حفظ تقرير الحالة", f"{self.case_data.get('child_name', {}).get('value', 'حالة')}.pdf", "PDF Files (*.pdf)")
            if not file_path:
                return
            if not file_path.lower().endswith(".pdf"):
                file_path += ".pdf"
            
            doc = SimpleDocTemplate(file_path, pagesize=A4, rightMargin=30, leftMargin=30, topMargin=40, bottomMargin=30)
            story = []
            
            story.append(Paragraph(pdf_ar_fix(self.case_data.get("child_name", {}).get("value", "-")), header_style))
            story.append(Spacer(1, 12))
            story.append(Paragraph(pdf_ar_fix(f"تاريخ التقرير: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"), subheader_style))
            story.append(Spacer(1, 12))
            story.append(Paragraph(pdf_ar_fix("بيانات الحالة"), section_style))
            case_table_data = [
                [Paragraph(pdf_ar_fix(self.case_data.get("case_id", "-")), cell_style), Paragraph(pdf_ar_fix("رقم الحالة"), cell_style_bold)]
            ]
            skip_fields = ['case_id', 'child_name']
            for key, value in self.case_data.items():
                if key not in skip_fields and value:
                    if isinstance(value, dict):
                        val = value.get("value", "-")
                        label = value.get("ar_key", key)
                    else:
                        val = value
                        label = key
                    case_table_data.append([Paragraph(pdf_ar_fix(str(val)), cell_style), Paragraph(pdf_ar_fix(str(label)), cell_style_bold)])
            table = Table(case_table_data, colWidths=[doc.width*0.35, doc.width*0.65])
            table.setStyle(TableStyle([
                ('GRID', (0,0), (-1,-1), 1, colors.white),
                ('BACKGROUND', (1, 0), (1, -1), colors.whitesmoke),
            ]))
            story.append(table)
            
                        
            skip_fields = ['survey_type', 'survey_date', 'submission_timestamp', 'case_id', 'child_name', 'dob', 'gender', '_filename']
            if surveys_to_export:
                for i, survey in enumerate(surveys_to_export, 1):
                    story.append(PageBreak())
                    story.append(Paragraph(pdf_ar_fix(f"الاستبيان رقم {i} - {survey.get('survey_type', '-') }"), section_style))
                    survey_table_data = [
                        [Paragraph(pdf_ar_fix(survey.get("survey_type", "-")), cell_style), Paragraph(pdf_ar_fix("نوع الاستبيان"), cell_style_bold)],
                        [Paragraph(pdf_ar_fix(survey.get("survey_date", "-")), cell_style), Paragraph(pdf_ar_fix("تاريخ الاستبيان"), cell_style_bold)]
                    ]
                    for key, value in survey.items():
                        if key not in skip_fields and value:
                            if isinstance(value, dict):
                                val = value.get("value", "-")
                                label = value.get("ar_key", key)
                            else:
                                val = value
                                label = key
                            survey_table_data.append([Paragraph(pdf_ar_fix(str(val)), cell_style), Paragraph(pdf_ar_fix(str(label)), cell_style_bold)])
                    s_table = Table(survey_table_data, colWidths=[doc.width*0.35, doc.width*0.65])
                    s_table.setStyle(TableStyle([
                        ('GRID', (0,0), (-1,-1), 1, colors.white),
                        ('BACKGROUND', (1, 0), (1, -1), colors.whitesmoke),
                    ]))
                    story.append(s_table)
            
            story.append(Spacer(1, 30))
            story.append(Paragraph(pdf_ar_fix("تم إنشاؤه بواسطة تطبيق MyCases"), ParagraphStyle(name='Footer', fontName=ar_font, fontSize=8, alignment=1)))
            
            doc.build(story)
            QMessageBox.information(self, "تم التصدير", "تم تصدير تقرير الحالة بنجاح.")
        except Exception as e:
            QMessageBox.critical(self, "خطأ في التصدير", f"فشل تصدير تقرير الحالة\n{e}")

"0000000000000000000000000000000000000000000000000000000000000"
